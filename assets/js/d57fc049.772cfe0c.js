"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[940],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?i.createElement(f,a(a({ref:t},c),{},{components:n})):i.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,a[1]=p;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4553:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var i=n(7462),r=(n(7294),n(4137));const o={sidebar_position:9},a="Pipelines",p={unversionedId:"major-concepts/pipelines",id:"major-concepts/pipelines",title:"Pipelines",description:"Pipelines are chains of plugins that operate in sequence over the input data in your manifest file.",source:"@site/docs/major-concepts/pipelines.md",sourceDirName:"major-concepts",slug:"/major-concepts/pipelines",permalink:"/major-concepts/pipelines",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/if-docs/edit/master/docs/major-concepts/pipelines.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Aggregation",permalink:"/major-concepts/aggregation"},next:{title:"Group-by",permalink:"/major-concepts/groupby"}},l={},s=[{value:"Prebuilt pipelines",id:"prebuilt-pipelines",level:2}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pipelines"},"Pipelines"),(0,r.kt)("p",null,"Pipelines are chains of plugins that operate in sequence over the input data in your manifest file."),(0,r.kt)("p",null,"Your input data is fed through your pipeline of plugins, with each plugin adding a key-value pair to the ",(0,r.kt)("inlineCode",{parentName:"p"},"inputs")," array or updating the value of an existing entry. "),(0,r.kt)("p",null,"Each plugin does some specific operation. The idea is that individual plugins are simple - they do one specific thing only - but they act like Impact Legos, building up into complex logic operating on your manifest file."),(0,r.kt)("h2",{id:"prebuilt-pipelines"},"Prebuilt pipelines"),(0,r.kt)("p",null,'We have designed our "standard library" of builtins to cover many generic operations such as file i/o, arithetic, queries etc so that in any cases you can build up complex pipelines without having to install any third party dependencies. One of the downsides of this is that logic that could be abstracted away into plugin code has to be implemented inside your manifest. We think this is great for transparency, auditability and reproducability, but it does come with a moderate learning curve. For this reason, we have provided prebuilt pipelines for several of our common operations, such as implementing the Teads curve for estimating cpu energy consumption from CPU utilization, looking up thermal design power dtaa for given processors and looking up metadata about specific processors or cloud regions from CSV files.'),(0,r.kt)("p",null,"We recommend looking at the manifests in the ",(0,r.kt)("inlineCode",{parentName:"p"},"manifests/examples")," folder that comes bundled with IF. "),(0,r.kt)("p",null,"We also have a set of pipeline walkthroughs on this website, including:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Teads curve"),(0,r.kt)("li",{parentName:"ul"},"tdp-finder"),(0,r.kt)("li",{parentName:"ul"},"cloud-region-metadata"),(0,r.kt)("li",{parentName:"ul"},"cloud-instance metadata")),(0,r.kt)("p",null,"These pipelines can be modified or chained together with other pipelines to make larger pipelines. Just as each plugin is a building block, pipelines themselves cna be building blocks too."))}u.isMDXComponent=!0}}]);