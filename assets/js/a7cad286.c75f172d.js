"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[947],{4137:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,g=u["".concat(s,".").concat(c)]||u[c]||d[c]||r;return n?a.createElement(g,o(o({ref:t},m),{},{components:n})):a.createElement(g,o({ref:t},m))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},371:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(4137));const r={},o="Teads' CPU Estimation Model",l={unversionedId:"models/teads-cpu",id:"models/teads-cpu",title:"Teads' CPU Estimation Model",description:"Please note Teads-AWS is a community model, not part of the IF standard library. This means the IF core team are not closely monitoring these models to keep them up to date. You should do your own research before implementing them!",source:"@site/docs/05-models/teads-cpu.md",sourceDirName:"05-models",slug:"/models/teads-cpu",permalink:"/models/teads-cpu",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/ief/docs/05-models/teads-cpu.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Teads' AWS Estimation Model",permalink:"/models/teads-aws"},next:{title:"WattTime Grid Emissions Model",permalink:"/models/watt-time"}},s={},p=[{value:"Model name",id:"model-name",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Model config",id:"model-config",level:3},{value:"Observations",id:"observations",level:3},{value:"Returns",id:"returns",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Linear Interpolation",id:"linear-interpolation",level:3},{value:"Example",id:"example",level:4},{value:"Spline Curve Approximation",id:"spline-curve-approximation",level:3},{value:"Example",id:"example-1",level:4},{value:"Example impl",id:"example-impl",level:2}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"teads-cpu-estimation-model"},"Teads' CPU Estimation Model"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Please note")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Teads-AWS")," is a community model, not part of the IF standard library. This means the IF core team are not closely monitoring these models to keep them up to date. You should do your own research before implementing them!"),(0,i.kt)("p",null,"Teads Engineering team has built a model that is capable of estimating CPU usages across varying type of CPUs using a curve commonly known as Teads Curve."),(0,i.kt)("h2",{id:"model-name"},"Model name"),(0,i.kt)("p",null,"IF recognizes the Teads CPU model as ",(0,i.kt)("inlineCode",{parentName:"p"},"teads-curve"),"."),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("h3",{id:"model-config"},"Model config"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"thermal-design-power"),": the TDp of the processor"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"interpolation"),": the interpolation method to apply to the TDP data")),(0,i.kt)("h3",{id:"observations"},"Observations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cpu-util"),": percentage CPU utilization for the observation ")),(0,i.kt)("h2",{id:"returns"},"Returns"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"energy-cpu"),": The energy used by the CPU, in kWh")),(0,i.kt)("h2",{id:"implementation"},"Implementation"),(0,i.kt)("h3",{id:"linear-interpolation"},"Linear Interpolation"),(0,i.kt)("p",null,"This model implements linear interpolation by default for estimating energy consumption using the TDP of a chip."),(0,i.kt)("p",null,"The power curve provided for ",(0,i.kt)("inlineCode",{parentName:"p"},"IDLE"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"10%"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"50%"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"100%")," in the Teads Curve are used by default."),(0,i.kt)("p",null,"The algorithm in linear interpolation will take the lowest possible base value + linear interpolated value. ie. 75% usage will be calculated as follows.\n",(0,i.kt)("inlineCode",{parentName:"p"},"100%")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"50%")," are the known values hence we are interpolating linearly between them.\n(",(0,i.kt)("inlineCode",{parentName:"p"},"50%")," + ",(0,i.kt)("inlineCode",{parentName:"p"},"(100%-50%)")," ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," ",(0,i.kt)("inlineCode",{parentName:"p"},"(75%-50%))")," ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," ",(0,i.kt)("inlineCode",{parentName:"p"},"thermal-design-power"),". "),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import {TeadsCurveModel} from 'ief';\n\nconst teads = new TeadsCurveModel();\nteads.configure({\n  thermal-design-power: 100, // thermal-design-power of the CPU\n});\nconst results = teads.execute([\n  {\n    duration: 3600, // duration institute\n    cpu: 100, // CPU usage as a value between 0 to 100 in percentage\n    datetime: '2021-01-01T00:00:00Z', // ISO8601 / RFC3339 timestamp\n  },\n]);\n")),(0,i.kt)("h3",{id:"spline-curve-approximation"},"Spline Curve Approximation"),(0,i.kt)("p",null,"This method implements the spline curve approximation using ",(0,i.kt)("inlineCode",{parentName:"p"},"typescript-cubic-spline"),". It is not possible to customize the spline behaviour as of now."),(0,i.kt)("p",null,"Resulting values are an approximation / estimation based on the testing done by Teads' Engineering Team. Further information can be found in the following links."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://medium.com/teads-engineering/building-an-aws-ec2-carbon-emissions-dataset-3f0fd76c98ac"},"TEADS Engineering: Building An AWS EC2 Carbon Emissions Dataset")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://medium.com/teads-engineering/estimating-aws-ec2-instances-power-consumption-c9745e347959"},"TEADS Engineering: Estimating AWS EC2 Instances Power Consumption"))),(0,i.kt)("h4",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import {TeadsCurveModel, TeadsInterpolation} from '@gsf/ief';\n\nconst teads = new TeadsCurveModel();\nteads.configure({\n  tdp: 100, // TDP of the CPU\n  interpolation: Interpolation.SPLINE,\n});\nconst results = teads.execute([\n  {\n    duration: 3600, // duration institute\n    cpu: 100, // CPU usage as a value between 0 to 100 in percentage\n    datetime: '2021-01-01T00:00:00Z', // ISO8601 / RFC3339 timestamp\n  },\n]);\n")),(0,i.kt)("h2",{id:"example-impl"},"Example impl"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"name: teads-cpu\ndescription: simple demo invoking sci-m\ntags:\ninitialize:\n  models:\n    - name: teads-cpu\n      kind: plugin\n      model: TeadsCpu\n      path: teads-cpu\ngraph:\n  children:\n    child:\n      pipeline: \n        - teads-cpu # duration & config -> embodied\n      config:\n        sci-m:\n          total-embodied-emissions: 1533.120 # gCO2eq\n          time-reserved: 1 # s per hour\n          expected-lifespan: 3 # 3 years in seconds        \n          resources-reserved: 1\n          total-resources: 8\n      inputs: \n        - timestamp: 2023-07-06T00:00\n          duration: 3600\n")))}d.isMDXComponent=!0}}]);