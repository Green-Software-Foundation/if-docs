"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[272],{4137:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,d=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=s(t),u=l,f=c["".concat(d,".").concat(u)]||c[u]||m[u]||i;return t?a.createElement(f,o(o({ref:n},p),{},{components:t})):a.createElement(f,o({ref:n},p))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,o=new Array(i);o[0]=c;var r={};for(var d in n)hasOwnProperty.call(n,d)&&(r[d]=n[d]);r.originalType=e,r.mdxType="string"==typeof e?e:l,o[1]=r;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},3695:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>s});var a=t(7462),l=(t(7294),t(4137));const i={},o="Cloud Instance Metadata",r={unversionedId:"models/cloud-instance-metadata",id:"models/cloud-instance-metadata",title:"Cloud Instance Metadata",description:"This plugin allows you to determine an instance's physical processor and thermal design power based on its instance name.",source:"@site/docs/05-models/cloud-instance-metadata.md",sourceDirName:"05-models",slug:"/models/cloud-instance-metadata",permalink:"/models/cloud-instance-metadata",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/TODO/docs/05-models/cloud-instance-metadata.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Cloud Carbon Footprint",permalink:"/models/ccf"},next:{title:"SCI-E (total energy)",permalink:"/models/sci-e"}},d={},s=[{value:"Model name",id:"model-name",level:2},{value:"Parameters",id:"parameters",level:2},{value:"model config",id:"model-config",level:3},{value:"Returns",id:"returns",level:2},{value:"IEF Implementation",id:"ief-implementation",level:2},{value:"Usage",id:"usage",level:2},{value:"AWS",id:"aws",level:3},{value:"Example Impl",id:"example-impl",level:2}],p={toc:s};function m(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"cloud-instance-metadata"},"Cloud Instance Metadata"),(0,l.kt)("p",null,"This plugin allows you to determine an instance's physical processor and thermal design power based on its instance name."),(0,l.kt)("h2",{id:"model-name"},"Model name"),(0,l.kt)("p",null,"IEF recognizes the Cloud Carbon Footprint model as ",(0,l.kt)("inlineCode",{parentName:"p"},"ccf"),"."),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("h3",{id:"model-config"},"model config"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"vendor"),": the cloud platform provider, e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"aws")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"instance-type"),": the name of the specific instance being used, e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"m5n.large"))),(0,l.kt)("h2",{id:"returns"},"Returns"),(0,l.kt)("p",null,"An array containing:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cloud-instance-type"),": echo input ",(0,l.kt)("inlineCode",{parentName:"li"},"instance-type")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cloud-vendor"),": echo input ",(0,l.kt)("inlineCode",{parentName:"li"},"vendor")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"physical-processor"),": physical processor used in the given instance"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"vcpus-allocated"),": number of vCPUs allocated to this instance"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"vcpus-total"),": total number of vCPUs available to this instance")),(0,l.kt)("h2",{id:"ief-implementation"},"IEF Implementation"),(0,l.kt)("p",null,"IEF implements this plugin using data from Cloud Carbon Footprint. This allows determination of cpu for type of instance in a cloud and can be invoked as part of a model pipeline defined in an ",(0,l.kt)("inlineCode",{parentName:"p"},"impl"),"."),(0,l.kt)("p",null,"Cloud Instance Metadata currently implements only for 'AWS'."),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("p",null,"In IEF, the model is called from an ",(0,l.kt)("inlineCode",{parentName:"p"},"impl"),". An ",(0,l.kt)("inlineCode",{parentName:"p"},"impl")," is a ",(0,l.kt)("inlineCode",{parentName:"p"},".yaml")," file that contains configuration metadata and usage inputs. This is interpreted by the command line tool, ",(0,l.kt)("inlineCode",{parentName:"p"},"impact-engine"),". There, the model's ",(0,l.kt)("inlineCode",{parentName:"p"},"configure")," method is called first. The model config shall be empty. Each input is expected to contain ",(0,l.kt)("inlineCode",{parentName:"p"},"cloud-vendor")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"cloud-instance-type")," fields."),(0,l.kt)("p",null,"You can see example Typescript invocations for each vendor below:"),(0,l.kt)("h3",{id:"aws"},"AWS"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import {CloudInstanceMetadataModel} from 'ief';\n\nconst cimm = new CloudInstanceMetadataModel();\nconst results = cimm.execute([\n  {\n    'cloud-vendor': 'aws',\n    'cloud-instance-type': 'm5n.large'\n  }\n])\n")),(0,l.kt)("h2",{id:"example-impl"},"Example Impl"),(0,l.kt)("p",null,"The following is an example of how cloud instance metadata can be invoked using an ",(0,l.kt)("inlineCode",{parentName:"p"},"impl"),". This assumes you have already installed the IF standard library of models using ",(0,l.kt)("inlineCode",{parentName:"p"},"yarn add https://github.com/Green-Software-Foundation/if-models/"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"name: cloud-instance-metadata-demo\ndescription: example impl invoking Cloud Instance Metadata model\ninitialize:\n  models:\n    - name: cloud-instance-metadata\n      kind: plugin\n      model: CloudInstanceMetadataModel\n      path: cloud-instance-metadata\ngraph:\n  children:\n    child:\n      pipeline:\n        - cloud-instance-metadata\n      config:\n      inputs:\n        - timestamp: 2023-07-06T00:00 # [KEYWORD] [NO-SUBFIELDS] time when measurement occurred\n          vendor: aws\n          instance_type: m5n.large\n          duration: 100\n          cpu-util: 10\n")),(0,l.kt)("p",null,"This impl is run using ",(0,l.kt)("inlineCode",{parentName:"p"},"impact-engine")," using the following command, run from the project root:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"npx ts-node scripts/impact.ts --impl ./examples/impls/cimd-test.yml --ompl ./examples/ompls/cimd-test.yml\n")),(0,l.kt)("p",null,"This yields a result that looks like the following (saved to ",(0,l.kt)("inlineCode",{parentName:"p"},"/ompls/cimd-test.yml"),"):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"name: cloud-instance-metadata-demo\ndescription: example impl invoking Cloud Instance Metadata model\ninitialize:\n  models:\n    - name: cloud-instance-metadata\n      kind: plugin\n      model: CloudInstanceMetadataModel\n      path: cloud-instance-metadata\ngraph:\n  children:\n    front-end:\n      pipeline:\n        - cloud-instance-metadata\n      inputs:\n        - timestamp: 2023-07-06T00:00\n          cloud-vendor: aws\n          cloud-instance-type: m5n.large\n          duration: 100\n          cpu: 10\n      outputs:\n        - timestamp: 2023-07-06T00:00\n          cloud-vendor: aws\n          cloud-instance-type: m5n.large\n          physical-processor: Intel Xeon Platinum 8259CL\n          duration: 100\n          cpu: 10\n")))}m.isMDXComponent=!0}}]);