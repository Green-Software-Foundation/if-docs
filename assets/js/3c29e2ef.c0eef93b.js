"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[702],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,g=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return n?i.createElement(g,o(o({ref:t},u),{},{components:n})):i.createElement(g,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8630:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=n(7462),a=(n(7294),n(4137));const r={sidebar_position:6},o="Contributions",l={unversionedId:"contributions",id:"contributions",title:"Contributions",description:"First off, thanks for taking the time to contribute! \ud83c\udf89",source:"@site/docs/contributions.md",sourceDirName:".",slug:"/contributions",permalink:"/contributions",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/ief/docs/contributions.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Plugins",permalink:"/reference/plugins"}},s={},p=[{value:"Table of Contents  omit from toc ",id:"table-of-contents--omit-from-toc-",level:2},{value:"Before you start",id:"before-you-start",level:2},{value:"Code Contributions",id:"code-contributions",level:2},{value:"Step 1: Fork",id:"step-1-fork",level:4},{value:"Step 2: Branch",id:"step-2-branch",level:4},{value:"Step 3: Commit",id:"step-3-commit",level:4},{value:"Generating a GPG key",id:"generating-a-gpg-key",level:5},{value:"Configure Git",id:"configure-git",level:5},{value:"Commit Format",id:"commit-format",level:5},{value:"Step 4: Sync",id:"step-4-sync",level:4},{value:"Step 5: Push",id:"step-5-push",level:4},{value:"Step 6: Pull Request",id:"step-6-pull-request",level:4},{value:"Commit message guidelines",id:"commit-message-guidelines",level:2},{value:"Coding guidelines",id:"coding-guidelines",level:2},{value:"Code structuring patterns",id:"code-structuring-patterns",level:4},{value:"Object Oriented Programming",id:"object-oriented-programming",level:6},{value:"Functional Programming",id:"functional-programming",level:6},{value:"Naming patterns",id:"naming-patterns",level:4},{value:"Documentation",id:"documentation",level:4},{value:"Writing tests",id:"writing-tests",level:4}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"contributions"},"Contributions"),(0,a.kt)("p",null,"First off, thanks for taking the time to contribute! \ud83c\udf89"),(0,a.kt)("p",null,"The following document is a rule set of guidelines for contributing."),(0,a.kt)("h2",{id:"table-of-contents--omit-from-toc-"},"Table of Contents "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#contributions"},"Contributions"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#before-you-start"},"Before you start")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#code-contributions"},"Code Contributions"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#step-1-fork"},"Step 1: Fork")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#step-2-branch"},"Step 2: Branch")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#step-3-commit"},"Step 3: Commit"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#generating-a-gpg-key"},"Generating a GPG key")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#configure-git"},"Configure Git")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#commit-format"},"Commit Format")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#step-4-sync"},"Step 4: Sync")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#step-5-push"},"Step 5: Push")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#step-6-pull-request"},"Step 6: Pull Request")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#commit-message-guidelines"},"Commit message guidelines")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#coding-guidelines"},"Coding guidelines"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#code-structuring-patterns"},"Code structuring patterns"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#object-oriented-programming"},"Object Oriented Programming")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#functional-programming"},"Functional Programming")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#naming-patterns"},"Naming patterns")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#documentation"},"Documentation")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#writing-tests"},"Writing tests"))))))),(0,a.kt)("h2",{id:"before-you-start"},"Before you start"),(0,a.kt)("p",null,"The best way to contribute to IF is to build your own plugins. You can build these in your own Github repositories or even publish them as packages, and then run them through IF without ever having to deal with IF core source code. "),(0,a.kt)("p",null,"However, if you want to contribute changes to our repositories, either ",(0,a.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"if-docs"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"if-plugins")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"if-unofficial-plugins")," the best way to start is to check the issue boards. "),(0,a.kt)("p",null,"Issues that are well suited to community contributions are tagged ",(0,a.kt)("inlineCode",{parentName:"p"},"help-wanted"),". If you see this tag, and no-one is assigned to the issue, then you can be confident that the issue describes a change we want to merge in and no-one is currently working on it. "),(0,a.kt)("p",null,"It is recommended to comment on the issue to make contact with the core team and signal your intention to work on it. You can then start working on the issue when it is assigned to you. "),(0,a.kt)("p",null,"Following this process makes it much more likely that your changes will get merged compared to raising unsolicited PRs."),(0,a.kt)("h2",{id:"code-contributions"},"Code Contributions"),(0,a.kt)("h4",{id:"step-1-fork"},"Step 1: Fork"),(0,a.kt)("p",null,"Fork the project on ",(0,a.kt)("a",{parentName:"p",href:"git@github.com:Green-Software-Foundation/if.git"},"GitHub")),(0,a.kt)("p",null,"You then have your own copy of the repository that you can change."),(0,a.kt)("h4",{id:"step-2-branch"},"Step 2: Branch"),(0,a.kt)("p",null,"Create new branch in your forked copy of the ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," repository, which will contain your new feature, fix or change."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"```bash\n$ git checkout -b <topic-branch-name>\n```\n")),(0,a.kt)("h4",{id:"step-3-commit"},"Step 3: Commit"),(0,a.kt)("p",null,"Make sure git knows your name and email address:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ git config --global user.name "Example User"\n$ git config --global user.email "user@example.com"\n')),(0,a.kt)("p",null,"Before committing changes to a GitHub repository, it's essential to set up a GPG (GNU Privacy Guard) signing key. These keys are used to sign commits, tags, and other data in GitHub repositories, verifying their authenticity and integrity, and ensuring they haven't been tampered with. To use signing keys effectively, make sure to complete the following steps:"),(0,a.kt)("h5",{id:"generating-a-gpg-key"},"Generating a GPG key"),(0,a.kt)("p",null,"If you haven't already done so, generate an OpenPGP keypair."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Download and install ",(0,a.kt)("a",{parentName:"li",href:"https://www.gnupg.org/download/"},"the GPG command line tools")," for your operating system. We generally recommend installing the latest version for your operating system."),(0,a.kt)("li",{parentName:"ul"},"Open Terminal."),(0,a.kt)("li",{parentName:"ul"},"Generate a GPG key pair.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ gpg --full-generate-key\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"At the prompt you can specify the kind of key, size, and the length of time the key should be valid or just press ",(0,a.kt)("inlineCode",{parentName:"li"},"Enter")," to accept the default"),(0,a.kt)("li",{parentName:"ul"},"Verify that your selections are correct."),(0,a.kt)("li",{parentName:"ul"},"Enter your user ID information."),(0,a.kt)("li",{parentName:"ul"},"Type a secure passphrase."),(0,a.kt)("li",{parentName:"ul"},"Use the ",(0,a.kt)("inlineCode",{parentName:"li"},"gpg --list-secret-keys --keyid-format=long")," command to list the long form of the GPG keys for which you have both a public and private key. A private key is required for signing commits or tags."),(0,a.kt)("li",{parentName:"ul"},"From the list of GPG keys, copy the long form of the GPG key ID you'd like to use."),(0,a.kt)("li",{parentName:"ul"},"Paste the text below, substituting in the GPG key ID you'd like to use. In this example, the GPG key ID is ",(0,a.kt)("inlineCode",{parentName:"li"},"3AA5C34371567BD2"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ gpg --armor --export 3AA5C34371567BD2\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Copy your GPG key, beginning with ",(0,a.kt)("inlineCode",{parentName:"li"},"-----BEGIN PGP PUBLIC KEY BLOCK-----")," and ending with ",(0,a.kt)("inlineCode",{parentName:"li"},"-----END PGP PUBLIC KEY BLOCK-----"),"."),(0,a.kt)("li",{parentName:"ul"},"Add the GPG key to your GitHub account.")),(0,a.kt)("h5",{id:"configure-git"},"Configure Git"),(0,a.kt)("p",null,"Make sure Git is configured to use the correct signing key. You can do this by setting the ",(0,a.kt)("inlineCode",{parentName:"p"},"user.signingkey")," configuration option in Git. Use the following command to set your signing key. In this example, the GPG key ID is ",(0,a.kt)("inlineCode",{parentName:"p"},"3AA5C34371567BD2"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git config --global user.signingkey 3AA5C34371567BD2\n")),(0,a.kt)("p",null,"To sign all commits by default in any local repository on your computer, run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git config --global commit.gpgsign true\n")),(0,a.kt)("h5",{id:"commit-format"},"Commit Format"),(0,a.kt)("p",null,"We use ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/conventional-changelog/commitlint"},"Conventional Commits")," for our commit messages. "),(0,a.kt)("p",null,"You can check our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Green-Software-Foundation/if/blob/dev/.commitlintrc.js"},"config file")," for the allowed types."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"fix(validation): Resolve issue with form input validation")),(0,a.kt)("p",null,"Commit your changes in logical chunks. Please do not push all changes in one commit."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Run ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run fix")," before commiting for not having conflict with CI linter.")),(0,a.kt)("p",null,"Please adhere to these ",(0,a.kt)("a",{parentName:"p",href:"#commit-message-guidelines"},"Commit message guidelines"),"."),(0,a.kt)("h4",{id:"step-4-sync"},"Step 4: Sync"),(0,a.kt)("p",null,"Use git pull/merge to synchronize your work with the IF repository."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git pull upstream dev\n")),(0,a.kt)("h4",{id:"step-5-push"},"Step 5: Push"),(0,a.kt)("p",null,"Push your topic branch to your fork:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ git push origin <topic-branch-name>\n")),(0,a.kt)("h4",{id:"step-6-pull-request"},"Step 6: Pull Request"),(0,a.kt)("p",null,"Open a Pull Request from your fork of the repository to the ",(0,a.kt)("inlineCode",{parentName:"p"},"dev")," branch of the IF repository with a clear title and description according to ",(0,a.kt)("a",{parentName:"p",href:".github/PULL_REQUEST_TEMPLATE.md"},"template"),"."),(0,a.kt)("p",null,"Pull request should pass all CI which are defined, should have at least one approve. It should adher to the specification for getting approved."),(0,a.kt)("p",null,"CI included lint checks, running tests, and etc."),(0,a.kt)("h2",{id:"commit-message-guidelines"},"Commit message guidelines"),(0,a.kt)("p",null,"The commit message should describe what changed and why."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The first line should:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"contain a short description of the change"),(0,a.kt)("li",{parentName:"ul"},"be 60 characters or less"),(0,a.kt)("li",{parentName:"ul"},"be prefixed with the name of the changed subsystem"),(0,a.kt)("li",{parentName:"ul"},"be entirely in lowercase with the exception of proper nouns, acronyms, and the words that refer to code,\nlike function/variable names\nExamples:")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"}," util: add getInitializedModel method to models.\n deps: add express package to dependencies.\n service: refactor get user.\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Keep the second line blank.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Wrap all other lines at 72 columns:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"describe each line in logical chunks"),(0,a.kt)("li",{parentName:"ul"},"start each line with: space hyphen space ( - ...)"),(0,a.kt)("li",{parentName:"ul"},"be entirely in lowercase with the exception of proper nouns, acronyms, and the words that refer to code,\nlike function/variable names")),(0,a.kt)("p",{parentName:"li"},"Examples:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"  - remove deprecated logger\n  - refactor some method\n  - add JSDoc on existing function\n")))),(0,a.kt)("h2",{id:"coding-guidelines"},"Coding guidelines"),(0,a.kt)("h4",{id:"code-structuring-patterns"},"Code structuring patterns"),(0,a.kt)("p",null,"Avoid having functions which are responsible to do multiple things at the same time. Make sure one function/method does one thing, and does it well."),(0,a.kt)("h6",{id:"object-oriented-programming"},"Object Oriented Programming"),(0,a.kt)("p",null,"While following ",(0,a.kt)("inlineCode",{parentName:"p"},"Object Oriented Programming")," paradigm, it's important to follow ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/SOLID"},"SOLID")," principles."),(0,a.kt)("h6",{id:"functional-programming"},"Functional Programming"),(0,a.kt)("p",null,"When designing module of the application in ",(0,a.kt)("inlineCode",{parentName:"p"},"Functional Programming")," paradigm, the key to follow ",(0,a.kt)("a",{parentName:"p",href:"https://dev.to/jamesrweb/principles-of-functional-programming-4b7c"},"basic")," principles."),(0,a.kt)("h4",{id:"naming-patterns"},"Naming patterns"),(0,a.kt)("p",null,"Make sure your ",(0,a.kt)("inlineCode",{parentName:"p"},"class/function/variable")," describes exactly what it does. Avoid using shortened words like txt, arr while doing naming decision. As a naming pattern ",(0,a.kt)("inlineCode",{parentName:"p"},"camel case")," should be used."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'\u274c const a = "<MOCK_VALUE_HERE>"\n\u2705 const mockValue = "<MOCK_VALUE_HERE>"\n\n\u274c const a = (txt: string) => console.log(txt)\n\u2705 const logMessage = (message: string) => console.log(message)\n')),(0,a.kt)("h4",{id:"documentation"},"Documentation"),(0,a.kt)("p",null,"Every logical unit (",(0,a.kt)("inlineCode",{parentName:"p"},"Class, function, method"),") should be covered with appropriate documentation. For documenting such, multi-line comment style is used."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"\u274c const a = (message: string) => console.log(message)\n\n\u2705\n/**\n * Logs given `message` to console.\n **/\nconst logMessage = (message: string) => console.log(message)\n")),(0,a.kt)("p",null,"For documenting variable, expression, single line comments can be used after declaration."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'class MockClass {\n     // this is a mock field\n  \u274c private mockField: string = "mock-field"\n  \u2705 private mockField: string = "mock-field" // Single line documenting style is used.\n}\n')),(0,a.kt)("h4",{id:"writing-tests"},"Writing tests"),(0,a.kt)("p",null,"One test file should be responsible for one module. ",(0,a.kt)("inlineCode",{parentName:"p"},"describe")," blocks should be used for module and function/method description. First ",(0,a.kt)("inlineCode",{parentName:"p"},"describe")," should follow ",(0,a.kt)("inlineCode",{parentName:"p"},"resource/module: ")," pattern. Second describe title should follow ",(0,a.kt)("inlineCode",{parentName:"p"},"method(): ")," pattern. Test units can use either ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"it"),", title should exactly describe behaviour and input argument. Make sure each test case covers one branch."),(0,a.kt)("p",null,"See example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"describe('util/args: ', () => {\n   describe('parseProcessArgument(): ', () => {\n      it('logs help message if property present in env.', () => {\n         ...\n      })\n   })\n})\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},(0,a.kt)("a",{parentName:"em",href:"/README.md#ief"},"\u2b05\ufe0f back to the root"))))}m.isMDXComponent=!0}}]);