"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[370],{4137:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>d});var a=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var p=a.createContext({}),u=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},m=function(t){var e=u(t.components);return a.createElement(p.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,r=t.originalType,p=t.parentName,m=l(t,["components","mdxType","originalType","parentName"]),c=u(n),d=i,g=c["".concat(p,".").concat(d)]||c[d]||s[d]||r;return n?a.createElement(g,o(o({ref:e},m),{},{components:n})):a.createElement(g,o({ref:e},m))}));function d(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:i,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1566:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(7462),i=(n(7294),n(4137));const r={author:"Asim Hussain (@jawache)",abstract:"How to process the outputs of an impact graph calculation, enriching it with grid emissions data, factoring in the functional unit, and time slicing to return a time series of SCI values."},o="Computation Pipeline",l={unversionedId:"specification/computation-pipeline",id:"specification/computation-pipeline",title:"Computation Pipeline",description:"Introduction",source:"@site/docs/04-specification/computation-pipeline.md",sourceDirName:"04-specification",slug:"/specification/computation-pipeline",permalink:"/specification/computation-pipeline",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/ief/docs/04-specification/computation-pipeline.md",tags:[],version:"current",frontMatter:{author:"Asim Hussain (@jawache)",abstract:"How to process the outputs of an impact graph calculation, enriching it with grid emissions data, factoring in the functional unit, and time slicing to return a time series of SCI values."},sidebar:"tutorialSidebar",previous:{title:"Specification",permalink:"/specification/"},next:{title:"Durations",permalink:"/specification/durations"}},p={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Calculation",id:"calculation",level:2},{value:"Normalization",id:"normalization",level:2},{value:"Example",id:"example",level:3},{value:"Aggregation",id:"aggregation",level:2},{value:"Functional Units (SCI)",id:"functional-units-sci",level:3},{value:"Example",id:"example-1",level:4}],m={toc:u};function s(t){let{components:e,...r}=t;return(0,i.kt)("wrapper",(0,a.Z)({},m,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"computation-pipeline"},"Computation Pipeline"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The execution of a  graph involves 4 phases:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-mermaid"},"flowchart LR\nCalculation --\x3e Enrichment --\x3e Normalization --\x3e Aggregation\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Calculation"),": Calculating the outputs of every component (leaf) node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Enrichment"),": Enriching the outputs, for example, calculating the carbon from energy using grid emissions data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Normalization"),": Bucketing the outputs into an output time series based on a configured ",(0,i.kt)("em",{parentName:"li"},"globally defined")," impact duration."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Aggregation"),": Aggregating the inputs by each time bucket, up the impact graph, to the parent nodes, and finally, the root node ")),(0,i.kt)("h2",{id:"calculation"},"Calculation"),(0,i.kt)("p",null,"We loop through the impact graph and component node by component node, pass in the provided inputs to the configured model plugins, and capture the outputs as a series of Impact Metrics."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"If multiple inputs have been provided, we provide ",(0,i.kt)("strong",{parentName:"p"},"multiple")," output impact metrics. At this stage 1-1 mapping exists between an input and an output Impact Metric.")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"[!important]","\nEach input input is for a time and duration, and each output impact metric is for the same time and duration. We should link an Impact Metric to the exact input used to generate it.")),(0,i.kt)("p",null,"Represented as ",(0,i.kt)("a",{parentName:"p",href:"/specification/impl"},"Impl"),", the calculation phase would compute every component node in the tree with ",(0,i.kt)("strong",{parentName:"p"},"inputs")," like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"component:\n  inputs: \n      - timestamp: 2023-07-06T00:00\n        duration: 15 \n        cpu: 33%\n      - timestamp: 2023-07-06T00:05\n        duration: 5\n        cpu: 23%\n      - timestamp: 2023-07-06T00:05\n        duration: 5\n        cpu: 11%\n")),(0,i.kt)("p",null,"To components with ",(0,i.kt)("strong",{parentName:"p"},"outputs"),", like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"component:\n  outputs:\n      - timestamp: 2023-07-06T00:00\n        duration: 15 \n        energy: 23 mWh\n      - timestamp: 2023-07-06T15:00\n        duration: 5\n        energy: 20 mWh\n      - timestamp: 2023-07-06T20:00\n        duration: 5\n        energy: 18 mWh  \n  inputs: \n      - timestamp: 2023-07-06T00:00\n        duration: 15 \n        cpu: 33%\n      - timestamp: 2023-07-06T15:00\n        duration: 5\n        cpu: 23%\n      - timestamp: 2023-07-06T20:00\n        duration: 5\n        cpu: 11%\n")),(0,i.kt)("h2",{id:"normalization"},"Normalization"),(0,i.kt)("p",null,"The next phase is for each leaf node to normalize the output impact metrics to a time series defined by a global ",(0,i.kt)("em",{parentName:"p"},"impact duration"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"[!warning]","\nAfter normalization, we will lose the 1-1 mapping between input inputs and output impact metrics, and the impact metrics will snap to a new time series defined by the impact duration.")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The output impact metric is effectively zero if no impact metric overlaps a given time and duration. It means nothing was running then, so there could not be any emissions from the component.")),(0,i.kt)("p",null,"An impact metric might be of a longer or smaller duration than the new globally defined impact duration or overlaps the new impact duration in some way. There can be many algorithms we can use to bucket/slice up the values, but a good default strategy is to use a weighting of time. "),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"Take, for example, the enriched data points from the example above, they each have mixed durations, some are 5, and some are 15mins."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Timestamp"),(0,i.kt)("th",{parentName:"tr",align:null},"Duration"),(0,i.kt)("th",{parentName:"tr",align:null},"Energy"),(0,i.kt)("th",{parentName:"tr",align:null},"Location"),(0,i.kt)("th",{parentName:"tr",align:null},"Grid"),(0,i.kt)("th",{parentName:"tr",align:null},"Operational"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2023-07-06T00:00"),(0,i.kt)("td",{parentName:"tr",align:null},"15"),(0,i.kt)("td",{parentName:"tr",align:null},"43"),(0,i.kt)("td",{parentName:"tr",align:null},"west-us"),(0,i.kt)("td",{parentName:"tr",align:null},"500"),(0,i.kt)("td",{parentName:"tr",align:null},"4.7")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2023-07-06T15:00"),(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"20"),(0,i.kt)("td",{parentName:"tr",align:null},"west-us"),(0,i.kt)("td",{parentName:"tr",align:null},"490"),(0,i.kt)("td",{parentName:"tr",align:null},"2.9")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2023-07-06T25:00"),(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"18"),(0,i.kt)("td",{parentName:"tr",align:null},"west-us"),(0,i.kt)("td",{parentName:"tr",align:null},"470"),(0,i.kt)("td",{parentName:"tr",align:null},"2.8")))),(0,i.kt)("p",null,"If we had decided to bucket the output impacts in 5 mins increments, we would specify an impact duration of 5 mins. This phase determines how to normalize the buckets to 5 min durations."),(0,i.kt)("p",null,"This effectively boils down to a choice of what weighting to use. The simplest would be to weight by time. So the first duration is 15 mins long; if we wanted to visualize in 5 min buckets, we would divide the impacts by 3."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"[!important]","\nThe decision to weight an impact to the new duration or copy it is determined by its unit of measurement. If the unit is a rate like gCO2e/kWh, we will copy it to the new buckets. Only some impacts will be weighted.")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Timestamp"),(0,i.kt)("th",{parentName:"tr",align:null},"Duration"),(0,i.kt)("th",{parentName:"tr",align:null},"Energy"),(0,i.kt)("th",{parentName:"tr",align:null},"Location"),(0,i.kt)("th",{parentName:"tr",align:null},"Grid"),(0,i.kt)("th",{parentName:"tr",align:null},"Operational"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2023-07-06T00:00"),(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"14.3"),(0,i.kt)("td",{parentName:"tr",align:null},"west-us"),(0,i.kt)("td",{parentName:"tr",align:null},"500"),(0,i.kt)("td",{parentName:"tr",align:null},"1.57")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2023-07-06T05:00"),(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"14.3"),(0,i.kt)("td",{parentName:"tr",align:null},"west-us"),(0,i.kt)("td",{parentName:"tr",align:null},"500"),(0,i.kt)("td",{parentName:"tr",align:null},"1.57")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2023-07-06T10:00"),(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"14.3"),(0,i.kt)("td",{parentName:"tr",align:null},"west-us"),(0,i.kt)("td",{parentName:"tr",align:null},"500"),(0,i.kt)("td",{parentName:"tr",align:null},"1.57")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2023-07-06T15:00"),(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"20"),(0,i.kt)("td",{parentName:"tr",align:null},"west-us"),(0,i.kt)("td",{parentName:"tr",align:null},"490"),(0,i.kt)("td",{parentName:"tr",align:null},"2.9")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2023-07-06T20:00"),(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"west-us"),(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2023-07-06T25:00"),(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"18"),(0,i.kt)("td",{parentName:"tr",align:null},"west-us"),(0,i.kt)("td",{parentName:"tr",align:null},"470"),(0,i.kt)("td",{parentName:"tr",align:null},"2.8")))),(0,i.kt)("p",null,"This would translate to YAML like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"component:\n  outputs:\n      - timestamp: 2023-07-06T00:00\n        duration: 5 mins\n        location: west-us\n        energy: 14.3 mWh\n        grid-intensity: 500 gCO2e / kWh\n        operational-carbon: 1.57g gCO2e\n      - timestamp: 2023-07-06T05:00\n        duration: 5 mins\n        location: west-us\n        energy: 14.3 mWh\n        grid-intensity: 500 gCO2e / kWh\n        operational-carbon: 1.57g gCO2e\n      - timestamp: 2023-07-06T10:00\n        duration: 5 mins\n        location: west-us\n        energy: 14.3 mWh\n        grid-intensity: 500 gCO2e / kWh\n        operational-carbon: 1.57g gCO2e                \n      - timestamp: 2023-07-06T15:00\n        duration: 5 mins\n        location: west-us\n        energy: 20 mWh\n        grid-intensity: 490 gCO2e / kWh\n        operational-carbon: 2.9 gCO2e       \n      - timestamp: 2023-07-06T25:00\n        duration: 5 mins\n        location: west-us\n        energy: 18 mWh  \n        grid-intensity: 470 gCO2e / kWh\n        operational-carbon: 2.8g gCO2e         \n  inputs: \n      - timestamp: 2023-07-06T00:00\n        duration: 15 mins\n        cpu: 33%\n      - timestamp: 2023-07-06T15:00\n        duration: 5 mins\n        cpu: 23%\n      - timestamp: 2023-07-06T20:00\n        duration: 5 mins\n        cpu: 11%        \n")),(0,i.kt)("h2",{id:"aggregation"},"Aggregation"),(0,i.kt)("p",null,"This phase aggregates the impact metrics from the component leaf nodes up the graph to the root node. The aggregation also applies to any parent nodes created for grouping purposes."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(7951).Z,width:"714",height:"476"})),(0,i.kt)("p",null,"The aggregation snaps to the new global time series defined by any configured impact duration, so each time bucket is aggregated separately up the graph to the top."),(0,i.kt)("p",null,"In the end, ",(0,i.kt)("strong",{parentName:"p"},"each node in the graph has a time series of outputs")," representing the aggregate outputs of itself and its children."),(0,i.kt)("p",null,"So not only are we returning a time series for the root node, but also for any child nodes."),(0,i.kt)("p",null,"Suppose you want to investigate why one duration has more impact than another. In that case, you can dig into its children and discover which of them is contributing most to the total outputs for that particular time bucket."),(0,i.kt)("h3",{id:"functional-units-sci"},"Functional Units (SCI)"),(0,i.kt)("p",null,"This also is the phase where we consider the functional units and generate an actual SCI score (carbon per X) instead of just carbon."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"We could not do this earlier since normalization doesn't work once you've created an SCI score (a rate)")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Time"),"\nThe easiest option is when the functional unit (",(0,i.kt)("inlineCode",{parentName:"p"},"R"),") is a time, e.g. carbon per minute. We need to scale up or down each carbon value (",(0,i.kt)("inlineCode",{parentName:"p"},"c"),") by the ratio of the functional unit and the impact duration."),(0,i.kt)("p",null,"For example, if the functional unit is ",(0,i.kt)("em",{parentName:"p"},"Hour")," and the Impact Duration is 24 hrs. Then we divide carbon by 24 to get ",(0,i.kt)("em",{parentName:"p"},"Carbon per Hour"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"component:\n  outputs:\n      - timestamp: 2023-07-06T00:00\n        duration: 24 hours\n        carbon: 14300 gCO2e # gCO2 per 24 hour duration\n        sci: 600 gCO2e / hour # (carbon/24) sci with R of hour\n")),(0,i.kt)("p",null,"If the functional unit is ",(0,i.kt)("em",{parentName:"p"},"Hour")," and the Impact Duration is 10 mins. Then we must multiply carbon by 6 to get ",(0,i.kt)("em",{parentName:"p"},"Carbon per Hour"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"component:\n  outputs:\n      - timestamp: 2023-07-06T00:00\n        duration: 10 mins\n        carbon: 10 gCO2e # gCO2 per 10 min duration\n        sci: 60 gCO2e / hour # (carbon*6) sci with R of hour\n")),(0,i.kt)("p",null,"In the above example, the impact metric had an sci score of 60g CO2e/hour; this value was valid for the 10 min duration of the impact. The following 10 mins duration might have another sci score."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Other"),"\nFor any other functional unit, we need to know the value to scale the carbon by for each impact time bucket. "),(0,i.kt)("p",null,"To handle the functional unit, we need to know the denominator of carbon. If it's ",(0,i.kt)("em",{parentName:"p"},"Users"),", then for each output impact metric, we also need a value of ",(0,i.kt)("em",{parentName:"p"},"Users")," to divide that carbon by to get Carbon per User."),(0,i.kt)("p",null,"So if the impact duration is ",(0,i.kt)("em",{parentName:"p"},"10mins")," and the functional unit is ",(0,i.kt)("em",{parentName:"p"},"Users"),". Then we need the ",(0,i.kt)("em",{parentName:"p"},"number of users")," for ",(0,i.kt)("strong",{parentName:"p"},"each")," 10 min impact duration, which we use to divide the carbon figure."),(0,i.kt)("p",null,"Ultimately, we need an equal number of Functional Unit Denominators and Impact Metrics. That can be generated by the ",(0,i.kt)("inlineCode",{parentName:"p"},"impact-engine"),", normalized from another time series of data, or provided precisely as required by the end user."),(0,i.kt)("h4",{id:"example-1"},"Example"),(0,i.kt)("p",null,"So if a component had these impact metrics:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"component:\n  outputs:\n      - timestamp: 2023-07-06T00:00\n        duration: 5 mins\n        carbon: 19 gCO2e\n      - timestamp: 2023-07-06T05:00\n        duration: 5 mins\n        carbon: 17 gCO2e\n      - timestamp: 2023-07-06T10:00\n        duration: 5 mins\n        carbon: 13 gCO2e\n      - timestamp: 2023-07-06T15:00\n        duration: 5 mins\n        carbon: 10 gCO2e\n      - timestamp: 2023-07-06T25:00\n        duration: 5 mins\n        carbon: 7 gCO2e               \n")),(0,i.kt)("p",null,"If the SCI score was ",(0,i.kt)("strong",{parentName:"p"},"Carbon per User"),", then the ",(0,i.kt)("strong",{parentName:"p"},"only way")," we could calculate an SCI score was for there to be a matching time series with a number of users for each time bucket, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"config:\n  functional-unit-denominators:\n      - timestamp: 2023-07-06T00:00\n        duration: 5 mins\n        users: 30\n      - timestamp: 2023-07-06T05:00\n        duration: 5 mins\n        users: 25\n      - timestamp: 2023-07-06T10:00\n        duration: 5 mins\n        users: 24\n      - timestamp: 2023-07-06T15:00\n        duration: 5 mins\n        users: 18\n      - timestamp: 2023-07-06T25:00\n        duration: 5 mins\n        users: 16\n")),(0,i.kt)("p",null,"And then we would divide the carbon by users for each matching time bucket to get an sci score, like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"component:\n  outputs:\n      - timestamp: 2023-07-06T00:00\n        duration: 5 mins\n        carbon: 19 gCO2e\n        sci: 0.63 gCO2e / user\n      - timestamp: 2023-07-06T05:00\n        duration: 5 mins\n        carbon: 17 gCO2e\n        sci: 0.68 gCO2e / user        \n      - timestamp: 2023-07-06T10:00\n        duration: 5 mins\n        carbon: 13 gCO2e\n        sci: 0.54 gCO2e / user      \n      - timestamp: 2023-07-06T15:00\n        duration: 5 mins\n        carbon: 10 gCO2e\n        sci: 0.56 gCO2e / user      \n      - timestamp: 2023-07-06T25:00\n        duration: 5 mins\n        carbon: 7 gCO2e       \n        sci: 0.44 gCO2e / user              \n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The same normalization plugin code could provide this time series of functional unit denominators. We pass in a fake component with inputs that represent the functional unit denominators, pass through the normalization phase, and generate a series of users for the global time series of impact durations.")))}s.isMDXComponent=!0},7951:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/4f5d33a26e8aa2964cf5272641e0618c-588711ae04c8e0597e1b3e2dcbc783c7.png"}}]);