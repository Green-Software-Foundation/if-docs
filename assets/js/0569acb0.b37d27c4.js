"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[796],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),d=i,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return t?a.createElement(g,r(r({ref:n},c),{},{components:t})):a.createElement(g,r({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3396:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(7462),i=(t(7294),t(4137));const o={"sidebar-position":1},r="Grabbing instance metadata from a CSV file",s={unversionedId:"pipelines/instance-metadata",id:"pipelines/instance-metadata",title:"Grabbing instance metadata from a CSV file",description:"Observations",source:"@site/docs/pipelines/instance-metadata.md",sourceDirName:"pipelines",slug:"/pipelines/instance-metadata",permalink:"/pipelines/instance-metadata",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/if-docs/edit/master/docs/pipelines/instance-metadata.md",tags:[],version:"current",frontMatter:{"sidebar-position":1},sidebar:"tutorialSidebar",previous:{title:"Teads CPU pipeline",permalink:"/pipelines/teads"},next:{title:"Software Carbon Intensity (SCI)",permalink:"/pipelines/sci"}},l={},p=[{value:"Observations",id:"observations",level:2},{value:"Impacts",id:"impacts",level:2},{value:"Scope",id:"scope",level:2},{value:"Description",id:"description",level:2},{value:"Tags",id:"tags",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Assumptions and limitations",id:"assumptions-and-limitations",level:2},{value:"Components",id:"components",level:2},{value:"Plugins",id:"plugins",level:2},{value:"csv-lookup",id:"csv-lookup",level:3},{value:"config",id:"config",level:4},{value:"regex",id:"regex",level:3},{value:"config",id:"config-1",level:4},{value:"IMP",id:"imp",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"grabbing-instance-metadata-from-a-csv-file"},"Grabbing instance metadata from a CSV file"),(0,i.kt)("h2",{id:"observations"},"Observations"),(0,i.kt)("p",null,"This IMP requires the following observations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"name of the specific cloud instance being used")),(0,i.kt)("h2",{id:"impacts"},"Impacts"),(0,i.kt)("p",null,"This pipeline looks up metadata associated with the given cloud instance. It does not generate impacts per se, it just retrieves additional data from an external file using the given instance name as a search key."),(0,i.kt)("h2",{id:"scope"},"Scope"),(0,i.kt)("p",null,"This pipeline is likely to be used as part of a larger pipeline. All we are doing here is retrieving metadata from an external file. Typicaly, this metadata will be used to feed further plugind to support impactestimates."),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"The instance metadata pipeline simply looks up a metadata for a given virtual machine instance name using the ",(0,i.kt)("inlineCode",{parentName:"p"},"csv-lookup")," plugin from the IF standard library. However, the target dataset can return multiple processor names for a given VM instance where there are multiple possibilitiers. This means we need to create a pipeline that includes the ",(0,i.kt)("inlineCode",{parentName:"p"},"regex")," plugin so parse out just one of the possible values."),(0,i.kt)("p",null,"For this demo we'll just extract the first value if there are multiple available for the ",(0,i.kt)("inlineCode",{parentName:"p"},"processor-name"),"."),(0,i.kt)("h2",{id:"tags"},"Tags"),(0,i.kt)("p",null,"csv, instance-metadata, regex"),(0,i.kt)("h2",{id:"common-patterns"},"Common Patterns"),(0,i.kt)("p",null,"The lookup process described on this page will likely be a common pattern used in other pipelines."),(0,i.kt)("h2",{id:"assumptions-and-limitations"},"Assumptions and limitations"),(0,i.kt)("p",null,"The following are assumed to be true in this IMP:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the target dataset is up to date"),(0,i.kt)("li",{parentName:"ul"},"where there are multiple possible processors associated with an instance name, it is appropriate to select the first in the list.")),(0,i.kt)("h2",{id:"components"},"Components"),(0,i.kt)("p",null,"There is only one component in this example. It represents the entire application. The component pipeline looks as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  compute:\n    - cloud-instance-metadata\n    - extract-processor-name\n")),(0,i.kt)("h2",{id:"plugins"},"Plugins"),(0,i.kt)("h3",{id:"csv-lookup"},"csv-lookup"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"csv-lookup")," plugin is used once. The instance is named ",(0,i.kt)("inlineCode",{parentName:"p"},"cloud-instance-metadata"),". It targets a csv file in our ",(0,i.kt)("inlineCode",{parentName:"p"},"if-data")," repository."),(0,i.kt)("h4",{id:"config"},"config"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'cloud-instance-metadata:\n  method: CSVLookup\n  path: \'builtin\'\n  config:\n    filepath: https://raw.githubusercontent.com/Green-Software-Foundation/if-data/main/cloud-metdata-azure-instances.csv\n    query: instance-class: "cloud/instance-type"\n    output: "*"\n')),(0,i.kt)("h3",{id:"regex"},"regex"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"regex")," plugin is used once. The instance is named ",(0,i.kt)("inlineCode",{parentName:"p"},"extract-processor-name"),". It parses the response from the csv lookup plugin and extracts the first entry from the returned list."),(0,i.kt)("h4",{id:"config-1"},"config"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"extract-processor-name:\n  method: Regex\n  path: 'builtin'\n  config:\n    parameter: cpu-model-name\n    match: /^([^,])+/g\n    output: cpu/name\n")),(0,i.kt)("h2",{id:"imp"},"IMP"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"name: instance-metadata\ndescription:\ntags:\ninitialize:\n  plugins:\n    cloud-instance-metadata:\n      method: CSVLookup\n      path: 'builtin'\n      config:\n        filepath: https://raw.githubusercontent.com/Green-Software-Foundation/if-data/main/cloud-metdata-azure-instances.csv\n        query:\n          instance-class: 'cloud/instance-type'\n        output: '*'\n    extract-processor-name:\n      method: Regex\n      path: 'builtin'\n      config:\n        parameter: cpu-model-name\n        match: /^([^,])+/g\n        output: cpu/name\ntree:\n  children:\n    child:\n      pipeline:\n        observe:\n        regroup:\n        compute:\n          - cloud-instance-metadata\n          - extract-processor-name\n      inputs:\n        - timestamp: 2023-08-06T00:00\n          duration: 3600\n          cpu/energy: 0.001\n          cloud/provider: gcp\n          cloud/region: asia-east\n          cloud/instance-type: Standard_A1_v2\n")),(0,i.kt)("p",null,"Now you can run this IMP using:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"if-run -m instance-metadata.yml -o output.yml\n")),(0,i.kt)("p",null,"Your new ",(0,i.kt)("inlineCode",{parentName:"p"},"output.yml")," file will contain the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"name: csv-demo\ndescription: null\ntags: null\ninitialize:\n  plugins:\n    cloud-instance-metadata:\n      path: builtin\n      method: CSVLookup\n      config:\n        filepath: >-\n          https://raw.githubusercontent.com/Green-Software-Foundation/if-data/main/cloud-metdata-azure-instances.csv\n        query:\n          instance-class: cloud/instance-type\n        output: '*'\n    extract-processor-name:\n      path: builtin\n      method: Regex\n      config:\n        parameter: cpu-model-name\n        match: /^([^,])+/g\n        output: cpu/name\nexecution:\n  command: >-\n    /home/user/.npm/_npx/1bf7c3c15bf47d04/node_modules/.bin/ts-node\n    /home/user/Code/if/src/index.ts -m manifests/examples/instance-metadata.yml\n  environment:\n    if-version: 0.6.0\n    os: macOS\n    os-version: 14.6.1\n    node-version: 18.20.4\n    date-time: 2024-10-03T15:15:36.328Z (UTC)\n    dependencies:\n      - '@babel/core@7.22.10'\n      - '@babel/preset-typescript@7.23.3'\n      - '@commitlint/cli@18.6.0'\n      - '@commitlint/config-conventional@18.6.0'\n      - '@grnsft/if-core@0.0.25'\n      - '@jest/globals@29.7.0'\n      - '@types/jest@29.5.8'\n      - '@types/js-yaml@4.0.9'\n      - '@types/luxon@3.4.2'\n      - '@types/node@20.9.0'\n      - axios-mock-adapter@1.22.0\n      - axios@1.7.2\n      - cross-env@7.0.3\n      - csv-parse@5.5.6\n      - csv-stringify@6.4.6\n      - fixpack@4.0.0\n      - gts@5.2.0\n      - husky@8.0.3\n      - jest@29.7.0\n      - js-yaml@4.1.0\n      - lint-staged@15.2.2\n      - luxon@3.4.4\n      - release-it@16.3.0\n      - rimraf@5.0.5\n      - ts-command-line-args@2.5.1\n      - ts-jest@29.1.1\n      - typescript-cubic-spline@1.0.1\n      - typescript@5.2.2\n      - winston@3.11.0\n      - zod@3.23.8\n  status: success\ntree:\n  children:\n    child:\n      pipeline:\n        observe:\n        regroup:\n        compute:\n          - cloud-instance-metadata\n          - extract-processor-name\n      inputs:\n        - timestamp: 2023-08-06T00:00\n          duration: 3600\n          cpu/energy: 0.001\n          cloud/provider: gcp\n          cloud/region: asia-east\n          cloud/instance-type: Standard_A1_v2\n      outputs:\n        - timestamp: 2023-08-06T00:00\n          duration: 3600\n          cpu/energy: 0.001\n          cloud/provider: gcp\n          cloud/region: asia-east\n          cloud/instance-type: Standard_A1_v2\n          cpu-cores-available: 52\n          cpu-cores-utilized: 1\n          cpu-manufacturer: Intel\n          cpu-model-name: >-\n            Intel\xae Xeon\xae Platinum 8272CL,Intel\xae Xeon\xae 8171M 2.1 GHz,Intel\xae Xeon\xae\n            E5-2673 v4 2.3 GHz,Intel\xae Xeon\xae E5-2673 v3 2.4 GHz\n          cpu-tdp: 205\n          gpu-count: nan\n          gpu-model-name: nan\n          gpu-tdp: nan\n          memory-available: 2\n          cpu/name: Intel\xae Xeon\xae Platinum 8272CL\n")))}u.isMDXComponent=!0}}]);