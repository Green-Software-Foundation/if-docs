"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[868],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=i,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return t?a.createElement(f,o(o({ref:n},c),{},{components:t})):a.createElement(f,o({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4477:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(7462),i=(t(7294),t(4137));const r={author:"Asim Hussain (@jawache)",abstract:"Describes the structure and purpose of Impact YAML, a file format to represent a Graph."},o="Manifest File",l={unversionedId:"specification/manifest-file",id:"specification/manifest-file",title:"Manifest File",description:"- An Impact Manifest is a file format based on yaml to represent a Graph, it's also sometimes called Impact YAML or IMPL.",source:"@site/docs/06-specification/manifest-file.md",sourceDirName:"06-specification",slug:"/specification/manifest-file",permalink:"/specification/manifest-file",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/ief/docs/06-specification/manifest-file.md",tags:[],version:"current",frontMatter:{author:"Asim Hussain (@jawache)",abstract:"Describes the structure and purpose of Impact YAML, a file format to represent a Graph."},sidebar:"tutorialSidebar",previous:{title:"Impact Framework",permalink:"/specification/impact-framework"},next:{title:"Model Pipeline",permalink:"/specification/model-pipeline"}},s={},p=[{value:"Use Cases",id:"use-cases",level:2},{value:"A formal report",id:"a-formal-report",level:3},{value:"An executable impact calculation manifest",id:"an-executable-impact-calculation-manifest",level:3},{value:"To bootstrap code",id:"to-bootstrap-code",level:3},{value:"Structure",id:"structure",level:2},{value:"Example",id:"example",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"manifest-file"},"Manifest File"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An Impact Manifest is a file format based on ",(0,i.kt)("a",{parentName:"li",href:"https://circleci.com/blog/what-is-yaml-a-beginner-s-guide/"},"yaml")," to represent a ",(0,i.kt)("a",{parentName:"li",href:"/specification/graph"},"Graph"),", it's also sometimes called Impact YAML or IMPL. "),(0,i.kt)("li",{parentName:"ul"},"Just like a Graph, an IMPL is a calculation manifest containing everything you want to measure and how you want to measure it. "),(0,i.kt)("li",{parentName:"ul"},"Manifest files being YAML means it's more human-readable and can be used as a ",(0,i.kt)("strong",{parentName:"li"},"formal method of writing use cases"),", such as SCI use cases."),(0,i.kt)("li",{parentName:"ul"},"Manifest files can be named ",(0,i.kt)("inlineCode",{parentName:"li"},".yaml")," (or ",(0,i.kt)("inlineCode",{parentName:"li"},".impl"),")."),(0,i.kt)("li",{parentName:"ul"},"Manifest files can be computed on the command line using the ",(0,i.kt)("a",{parentName:"li",href:"/specification/impact-framework"},"Impact-Engine")," tool, printing out the results to file or STDOUT.")),(0,i.kt)("h2",{id:"use-cases"},"Use Cases"),(0,i.kt)("p",null,"There are several use cases for an Manifest file."),(0,i.kt)("h3",{id:"a-formal-report"},"A formal report"),(0,i.kt)("p",null,"An Manifest file is a computable calculation manifest. A formal report detailing not just the end impact but all the assumptions, inputs, and models used in calculating the impact."),(0,i.kt)("p",null,"Being a very formal structure, it can be parsed by software, compared to other reports, adjusted, run, and verified."),(0,i.kt)("p",null,"Currently, in the GSF several case studies have been written to calculate an SCI score for an application, these can all be re-written in Manifest file format."),(0,i.kt)("h3",{id:"an-executable-impact-calculation-manifest"},"An executable impact calculation manifest"),(0,i.kt)("p",null,"The command line tool ",(0,i.kt)("a",{parentName:"p",href:"Impact.md"},"Impact")," can compute an Manifest file and generate impact metrics. "),(0,i.kt)("h3",{id:"to-bootstrap-code"},"To bootstrap code"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Manifest files will be able to represent simple calculation manifest but to handle larger, more complex systems, we will have to write Graphs as code using our SDK."),(0,i.kt)("li",{parentName:"ul"},"To help bootstrap the process, humans can write the high-level structure using Manifest file and run through a tool to generate starter Graph code in any language our SDK supports.")),(0,i.kt)("h2",{id:"structure"},"Structure"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"name: <name>\ndescription: <description>\ntags:\n  <key>: <value>\nvariables:\n  <key>: <value>\nconfig:\n  pipeline:\n    calculation: TBD\n    normalization: TBD\n    bucketing: TBD\n    aggregation: TBD\ngraph: # The nodes under this root node\n\n  # Single input\n  <component>:\n    model: <imp-identifier>\n    config: \n      <key>: <value>\n    input:\n      timestamp: <timestamp>\n      duration: <duration>\n      <key>: <value>\n\n  # Multiple inputs      \n  <component>:\n    model: <imp-identifier>\n    config: \n      <key>: <value>\n    inputs:\n      common:\n        <key>: <value>\n      series:\n        - timestamp: <timestamp>\n          duration: <duration>\n          <key>: <value>\n        - timestamp: <timestamp>\n          duration: <duration>\n          <key>: <value>        \n      mapping:\n        <from-field>:\n          to: <to-field>\n          units: <units>\n\n  # Multiple inputs from CSV \n  <component>:\n    model: <imp-identifier>\n    config: \n      <key>: <value>\n    inputs:\n      common:\n        <key>: <value>\n      series:\n        csv: <path-to-csv>       \n      mapping:\n        <from-field>:\n          to: <to-field>\n          units: <units> \n\n  # Simple grouping\n  <grouping>:\n    <component>:\n      model: <imp-identifier>\n      config: \n        <key>: <value>\n      input:\n        timestamp: <timestamp>\n        duration: <duration>\n        <key>: <value>\n\n  # Advanced grouping\n  <grouping>:\n    model: <imp-identifier>\n    config: \n      <key>: <value>\n    children:\n      <component-1>:\n        input:\n          timestamp: <timestamp>\n          duration: <duration>\n          <key>: <value>\n      <component-2>:\n        input:\n          timestamp: <timestamp>\n          duration: <duration>\n          <key>: <value>\n")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"A simple 3 component web server application running on GCP, Azure, and AWS and using multiple models and specifically calculating an SCI score."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"name: My application\ndescription: A simple web server\ntags:\n  kind: web-server\n  complexity: simple\n  category: cloud\nconfig: \n  pipeline: # config to define computation settings to support an SCI calculation\n    calculation: \n      plugin: gsf.pipeline.calc.sci\n    enrichment:\n      plugin: gsf.pipeline.enrich.sci\n      grid-emissions-plugin: watttime\n    normalization:\n      plugin: gsf.pipeline.norm.sci\n      impact-window: 3600\n    aggregation:\n      plugin: gsf.pipeline.agg.sci\n      functional-unit: hour\ngraph:\n  backend: # an advanced grouping node\n    model: boavizta.cloud.sci  \n    config: \n      vendor: azure\n      region: east-us  \n    children: \n      queue: # a leaf component\n        inputs: \n          config:\n            sku: AC2\n          series:\n            - timestamp: 2023-07-06T00:00\n              span: 5 # this data is using span, but the model expects duration\n              cpu: 0.34\n            - timestamp: 2023-07-06T00:05\n              span: 5\n              cpu: 0.23\n            - timestamp: 2023-07-06T00:05\n              span: 5\n              cpu: 0.11\n          mapping:\n            span:\n              units: seconds\n              to: duration\n      servers: # a leaf component\n        config: ccf.cloud.sci  \n        params: \n          vendor: aws\n          region: france\n        inputs: \n          config:\n            sku: EC2\n          series:      \n            - datetime: 2023-07-06T00:00\n              duration: 5\n              cpu: 0.34\n            - datetime: 2023-07-06T00:05\n              duration: 5\n              cpu: 0.23\n            - datetime: 2023-07-06T00:05\n              duration: 5\n              cpu: 0.11\n  edge: # a simple grouping node\n    load-balancer: \n      model: boavizta.cloud.sci\n      config: \n        vendor: gcp\n        region: west-us\n      input: # a single input for the whole duration\n        datetime: 2023-07-06T00:00\n        duration: 15\n        cpu: 0.34\n")),(0,i.kt)("p",null,"Once it's computed through an application like ",(0,i.kt)("a",{parentName:"p",href:"Impact.md"},"Impact"),", it might return/print out a YAML like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"name: My application\ngraph:\n  outputs:\n    e: 63 mWh # sum of all the child node energy \n    m: 61g # sum of all the child node embodied\n  children:\n    edge:\n      outputs: \n        e: 48 mWh\n        m: 4g\n      children:\n        load-balancer:\n          outputs:\n            e: 48 mWh\n            m: 4g\n  backend:\n    outputs:\n      e: 15 mWh\n      m: 57g  q3\n    children:\n      backend server:\n        outputs:\n          e: 5 mWh\n          m: 23g\n      caching layer:\n        outputs:    \n          e: 10 mWh\n          m: 34g\n")))}u.isMDXComponent=!0}}]);