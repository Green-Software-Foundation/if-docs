"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[515],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(n),u=r,h=c["".concat(s,".").concat(u)]||c[u]||d[u]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var m=2;m<i;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3657:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var a=n(7462),r=(n(7294),n(4137));const i={},o="SCI-M: embodied carbon",l={unversionedId:"models/sci-m",id:"models/sci-m",title:"SCI-M: embodied carbon",description:"Software systems cause emissions through the hardware that they operate on, both through the energy that the physical hardware consumes and the emissions associated with manufacturing the hardware. Embodied carbon refers to the carbon emitted during the manufacture and eventual disposal of a component. It is added to the operational carbon (carbon emitted when a component is used) to give an overall SCI score.",source:"@site/docs/05-models/sci-m.md",sourceDirName:"05-models",slug:"/models/sci-m",permalink:"/models/sci-m",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/TODO/docs/05-models/sci-m.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SCI-E (total energy)",permalink:"/models/sci-e"},next:{title:"SCI-O (operational emissions)",permalink:"/models/sci-o"}},s={},m=[{value:"Model name",id:"model-name",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Model config",id:"model-config",level:3},{value:"Observations",id:"observations",level:3},{value:"Returns",id:"returns",level:2},{value:"Calculation",id:"calculation",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Usage",id:"usage",level:2},{value:"Example impl",id:"example-impl",level:2}],p={toc:m};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sci-m-embodied-carbon"},"SCI-M: embodied carbon"),(0,r.kt)("p",null,"Software systems cause emissions through the hardware that they operate on, both through the energy that the physical hardware consumes and the emissions associated with manufacturing the hardware. Embodied carbon refers to the carbon emitted during the manufacture and eventual disposal of a component. It is added to the operational carbon (carbon emitted when a component is used) to give an overall SCI score."),(0,r.kt)("p",null,"Read more on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Green-Software-Foundation/sci/blob/main/Software_Carbon_Intensity/Software_Carbon_Intensity_Specification.md#embodied-emissions"},"embodied carbon")),(0,r.kt)("h2",{id:"model-name"},"Model name"),(0,r.kt)("p",null,"IF recognizes the SCI-M model as ",(0,r.kt)("inlineCode",{parentName:"p"},"sci-m")," "),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("h3",{id:"model-config"},"Model config"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"total-embodied-emissions"),": the sum of Life Cycle Assessment (LCA) emissions for the component"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time-reserved"),": the share of the total life span of the hardware reserved for use by an application"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expected-lifespan"),": the length of time, in seconds, between a component's manufacture and its disposal"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"reserved-resources"),": the number of resources reserved for use by the software"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"total-resources"),": the total number of resources available")),(0,r.kt)("h3",{id:"observations"},"Observations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timestamp"),": a timestamp for the observation"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"duration"),": the amount of time, in seconds, that the observation covers.")),(0,r.kt)("h2",{id:"returns"},"Returns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"embodied-carbon"),": the carbon emitted in manufacturing and disposing of a component, in gCO2eq")),(0,r.kt)("h2",{id:"calculation"},"Calculation"),(0,r.kt)("p",null,"To calculate the embodied carbon, ",(0,r.kt)("inlineCode",{parentName:"p"},"m")," for a software application, use the equation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"m = te * ts * rs\n")),(0,r.kt)("p",null,"Where:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"total-embodied-emissions")," = Total embodied emissions; the sum of Life Cycle Assessment (LCA) emissions for the component.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"timeShare")," = Time-share; the share of the total life span of the hardware reserved for use by an application. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timeShare")," is calculated as ",(0,r.kt)("inlineCode",{parentName:"li"},"time-reserved/expedted-lifespan"),", where:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"time-reserved")," = Time Reserved; the length of time the hardware is reserved for use by the software."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expected-lifespan")," = Expected lifespan: the length of time, in seconds, between a component's manufacture and its disposal"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"resourceshare")," = Resource-share; the share of the total available resources of the hardware reserved for use by an application. "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"resourceShare")," is calculated as ",(0,r.kt)("inlineCode",{parentName:"li"},"resources-reserved/total-resources"),", where:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"resources-reserved")," = Resources reserved; the number of resources reserved for use by the software."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"total-resources")," = Total Resources; the total number of resources available.")))))),(0,r.kt)("h2",{id:"implementation"},"Implementation"),(0,r.kt)("p",null,"IEF implements the plugin based on the logic described above. To run the model, you must first create an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"SciMModel")," and call its ",(0,r.kt)("inlineCode",{parentName:"p"},"configure()")," method. Then, you can call ",(0,r.kt)("inlineCode",{parentName:"p"},"execute()")," to return ",(0,r.kt)("inlineCode",{parentName:"p"},"m"),"."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"The following snippet demonstrates how to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"sci-m")," model from Typescript."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { SciMModel } from '@gsf/ief';\n\nconst sciMModel = new SciMModel();\nsciMModel.configure()\nconst results = sciMModel.execute([\n  {\n    total-embodied-emissions: 200, // in gCO2e for total resource units\n    time-reserved 60 * 60 * 24 * 30, // time reserved in seconds, can point to another field \"duration\"\n    expected-lifespan: 60 * 60 * 24 * 365 * 4, // lifespan in seconds (4 years)\n    resources-reserved: 1, // resource units reserved / used\n    total-resources: 1, // total resource units available\n  }\n])\n")),(0,r.kt)("h2",{id:"example-impl"},"Example impl"),(0,r.kt)("p",null,"IEF users will typically call the model as part of a pipeline defined in an ",(0,r.kt)("inlineCode",{parentName:"p"},"impl")," file. In this case, instantiating and configuring the model is handled by ",(0,r.kt)("inlineCode",{parentName:"p"},"impact-engine")," and does not have to be done explicitly by the user. The following is an example ",(0,r.kt)("inlineCode",{parentName:"p"},"impl")," that calls ",(0,r.kt)("inlineCode",{parentName:"p"},"sci-m"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"name: sci-m\ndescription: simple demo invoking sci-m\ntags:\ninitialize:\n  models:\n    - name: sci-m\n      kind: plugin\n      model: SciMModel\n      path: sci-m\ngraph:\n  children:\n    child:\n      pipeline: \n        - sci-m # duration & config -> embodied\n      config:\n        sci-m:\n          total-embodied-emissions: 1533.120 # gCO2eq\n          time-reserved: 1 # s per hour\n          expected-lifespan: 3 # 3 years in seconds        \n          resources-reserved: 1\n          total-resources: 8\n      inputs: \n        - timestamp: 2023-07-06T00:00\n          duration: 3600\n")),(0,r.kt)("p",null,"You can run this example ",(0,r.kt)("inlineCode",{parentName:"p"},"impl")," by executing the following command from the project root:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npx ts-node scripts/impact.ts --impl ./examples/impls/sci-m.yml --ompl ./examples/ompls/sci-m-test.yml\n")),(0,r.kt)("p",null,"The results will be saved to a new ",(0,r.kt)("inlineCode",{parentName:"p"},"yaml")," file in ",(0,r.kt)("inlineCode",{parentName:"p"},"/ompls"),"."))}d.isMDXComponent=!0}}]);