"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[694],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),u=a,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return t?o.createElement(f,r(r({ref:n},c),{},{components:t})):o.createElement(f,r({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=t[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1391:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=t(7462),a=(t(7294),t(4137));const i={},r="Cloud Carbon Footprint",l={unversionedId:"models/ccf",id:"models/ccf",title:"Cloud Carbon Footprint",description:"Please note Boavizta is a community cmodel, not part of the IF standard library. This means the IF core team are not closely monitoring these models to keep them up to date. You should do your own research before implementing them!",source:"@site/docs/05-models/ccf.md",sourceDirName:"05-models",slug:"/models/ccf",permalink:"/models/ccf",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/TODO/docs/05-models/ccf.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Boavizta",permalink:"/models/boavizta"},next:{title:"Cloud Instance Metadata",permalink:"/models/cloud-instance-metadata"}},s={},p=[{value:"Model name",id:"model-name",level:2},{value:"Parameters",id:"parameters",level:2},{value:"model config",id:"model-config",level:3},{value:"observations",id:"observations",level:3},{value:"Returns",id:"returns",level:2},{value:"IEF Implementation",id:"ief-implementation",level:2},{value:"Usage",id:"usage",level:2},{value:"AWS",id:"aws",level:3},{value:"Azure",id:"azure",level:3},{value:"GCP",id:"gcp",level:3},{value:"Example Impl",id:"example-impl",level:2}],c={toc:p};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cloud-carbon-footprint"},"Cloud Carbon Footprint"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Please note")," Boavizta is a community cmodel, not part of the IF standard library. This means the IF core team are not closely monitoring these models to keep them up to date. You should do your own research before implementing them!"),(0,a.kt)("p",null,'"Cloud Carbon Footprint is an open source tool that provides visibility and tooling to measure, monitor and reduce your cloud carbon emissions. We use best practice methodologies to convert cloud utilization into estimated energy usage and carbon emissions, producing metrics and carbon savings estimates that can be shared with employees, investors, and other stakeholders." - ',(0,a.kt)("a",{parentName:"p",href:"https://www.cloudcarbonfootprint.org/"},"CCF")),(0,a.kt)("h2",{id:"model-name"},"Model name"),(0,a.kt)("p",null,"IEF recognizes the Cloud Carbon Footprint model as ",(0,a.kt)("inlineCode",{parentName:"p"},"ccf"),"."),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("h3",{id:"model-config"},"model config"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"vendor"),": the cloud platform provider, e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"aws")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"instance-type"),": the name of the specific instance being used, e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"m5n.large"))),(0,a.kt)("h3",{id:"observations"},"observations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cpu-util"),": percentage CPU utilization for a given observation"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duration"),": the amount of time the observation covers, in seconds"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timestamp"),": a timestamp for the observation")),(0,a.kt)("h2",{id:"returns"},"Returns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"embodied-carbon"),": carbon emitted in manufacturing the device, in gCO2eq"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"energy"),": energy used by CPU in kWh")),(0,a.kt)("h2",{id:"ief-implementation"},"IEF Implementation"),(0,a.kt)("p",null,"IEF reimplements the Cloud Carbon Footprint methodology fro scratch conforming to the IEF specification. This means the CCF models can be run inside IEF without any external API calls and can be invoked as part of a model pipeline defined in an ",(0,a.kt)("inlineCode",{parentName:"p"},"impl"),"."),(0,a.kt)("p",null,"Cloud Carbon Footprint includes calculations for three cloud vendors: AWS, Azure and GCP. "),(0,a.kt)("p",null,"The general methodology is as follows:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Total CO2e = operational emissions + embodied Emissions")),(0,a.kt)("p",null,"Where:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Operational emissions = (Cloud vendor service usage) x (Cloud energy conversion factors [kWh]) x (Cloud vendor Power Usage Effectiveness (PUE)) x (grid emissions factors [metric tons CO2e])")),(0,a.kt)("p",null,"And:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Embodied Emissions = estimated metric tons CO2e emissions from the manufacturing of datacenter servers, for compute usage")),(0,a.kt)("p",null,"You can read a detailed explanation ofn the calculations in the ",(0,a.kt)("a",{parentName:"p",href:"https://www.cloudcarbonfootprint.org/docs/methodology/"},"CCF docs")," and see the code for our implementation in ",(0,a.kt)("a",{parentName:"p",href:"../../src/lib/ccf/"},"this repository"),"."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"In IEF, the model is called from an ",(0,a.kt)("inlineCode",{parentName:"p"},"impl"),". An ",(0,a.kt)("inlineCode",{parentName:"p"},"impl")," is a ",(0,a.kt)("inlineCode",{parentName:"p"},".yaml")," file that contains configuration metadata and usage inputs. This is interpreted by the command line tool, ",(0,a.kt)("inlineCode",{parentName:"p"},"impact-engine"),". There, the model's ",(0,a.kt)("inlineCode",{parentName:"p"},"configure")," method is called first. The model config should define a ",(0,a.kt)("inlineCode",{parentName:"p"},"vendor")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"instance-type"),". Each input is expected to contain ",(0,a.kt)("inlineCode",{parentName:"p"},"duration"),",",(0,a.kt)("inlineCode",{parentName:"p"},"cpu-util")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"timestamp")," fields."),(0,a.kt)("p",null,"You can see example Typescript invocations for each vendor below:"),(0,a.kt)("h3",{id:"aws"},"AWS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {CloudCarbonFootprint} from 'ief';\n\nconst ccf = new CloudCarbonFootprint();\nccf.configure({\n  vendor: 'aws',\n  instance_type: 'm5n.large'\n})\nconst results = ccf.execute([\n  {\n    duration: 3600, // duration institute\n    cpu-util: 10, // CPU usage as a percentage\n    timestamp: '2021-01-01T00:00:00Z', // ISO8601 / RFC3339 timestamp\n  }\n])\n")),(0,a.kt)("h3",{id:"azure"},"Azure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {CloudCarbonFootprint} from 'ief';\n\nconst ccf = new CloudCarbonFootprint();\nccf.configure({\n  vendor: 'azure',\n  instance_type: 'D4 v4'\n})\nconst results = ccf.execute([\n  {\n    duration: 3600, // duration institute\n    cpu-util: 10, // CPU usage as a percentage\n    timestamp: '2021-01-01T00:00:00Z', // ISO8601 / RFC3339 timestamp\n  }\n])\n")),(0,a.kt)("h3",{id:"gcp"},"GCP"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {CloudCarbonFootprint} from 'ief';\n\nconst ccf = new CloudCarbonFootprint();\nccf.configure({\n  vendor: 'gcp',\n  instance_type: 'n2-standard-2'\n})\nconst results = ccf.execute([\n  {\n    duration: 3600, // duration institute\n    cpu-util: 10, // CPU usage as a percentage\n    timestamp: '2021-01-01T00:00:00Z', // ISO8601 / RFC3339 timestamp\n  }\n]) \n")),(0,a.kt)("h2",{id:"example-impl"},"Example Impl"),(0,a.kt)("p",null,"The following is an example of how CCF can be invoked using an ",(0,a.kt)("inlineCode",{parentName:"p"},"impl"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"name: ccf-demo\ndescription: example impl invoking CCF model\ninitialize:\n  models:\n    - name: ccf\n      kind: plugin\n      model: CloudCarbonFootprint\n      path: ccf\ngraph:\n  children:\n    child:\n      pipeline:\n        - ccf\n      config:\n        ccf:\n          vendor: aws\n          instance_type: m5n.large\n      inputs:\n        - timestamp: 2023-07-06T00:00 # [KEYWORD] [NO-SUBFIELDS] time when measurement occurred\n          duration: 1\n          cpu-util: 10\n")),(0,a.kt)("p",null,"This impl is run using ",(0,a.kt)("inlineCode",{parentName:"p"},"impact-engine")," using the following command, run from the project root:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npx ts-node scripts/impact.ts --impl ./examples/impls/ccf-test.yml --ompl ./examples/ompls/ccf-test.yml\n")),(0,a.kt)("p",null,"This yields a result that looks like the following (saved to ",(0,a.kt)("inlineCode",{parentName:"p"},"/ompls/ccf-test.yml"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"name: ccf-demo\ndescription: example impl invoking CCF model\ninitialize:\n  models:\n    - name: ccf\n      kind: plugin\n      model: CloudCarbonFootprint\n      path: ccf\ngraph:\n  children:\n    front-end:\n      pipeline:\n        - ccf\n      config:\n        ccf:\n          vendor: aws\n          instance_type: m5n.large\n      inputs:\n        - timestamp: 2023-07-06T00:00\n          duration: 1\n          cpu: 10\n      outputs:\n        - timestamp: 2023-07-06T00:00\n          duration: 1\n          cpu-util: 10\n          vendor: aws\n          instance_type: m5n.large\n          energy: 0.000018845835066981333\n          embodied_emissions: 0.02553890791476408\n")))}m.isMDXComponent=!0}}]);