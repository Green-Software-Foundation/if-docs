"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[712],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(g,r(r({ref:n},c),{},{components:t})):a.createElement(g,r({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6890:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(7462),o=(t(7294),t(4137));const i={"sidebar-position":3},r="Software Carbon Intensity (SCI)",l={unversionedId:"pipelines/sci",id:"pipelines/sci",title:"Software Carbon Intensity (SCI)",description:"The software carbon intensity (SCI) score is perhaps the most important value that can be generated using Impact Framework.",source:"@site/docs/pipelines/sci.md",sourceDirName:"pipelines",slug:"/pipelines/sci",permalink:"/pipelines/sci",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/if-docs/edit/master/docs/pipelines/sci.md",tags:[],version:"current",frontMatter:{"sidebar-position":3},sidebar:"tutorialSidebar",previous:{title:"Instance metadata pipeline",permalink:"/pipelines/instance-metadata"},next:{title:"Reference",permalink:"/reference/"}},p={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Pasting in the Teads pipeline",id:"step-1-pasting-in-the-teads-pipeline",level:2},{value:"Step 2: Adding a network/energy component",id:"step-2-adding-a-networkenergy-component",level:2},{value:"Step 3: Account for embodied carbon",id:"step-3-account-for-embodied-carbon",level:2},{value:"Step 4: Calculate operational carbon",id:"step-4-calculate-operational-carbon",level:2},{value:"Step 5: Sum carbon components",id:"step-5-sum-carbon-components",level:2},{value:"Step 6: Calculate SCI",id:"step-6-calculate-sci",level:2},{value:"Step 7: Create the pipeline",id:"step-7-create-the-pipeline",level:2},{value:"Step 8: Run your manifest",id:"step-8-run-your-manifest",level:2},{value:"What next?",id:"what-next",level:2}],c={toc:s};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"software-carbon-intensity-sci"},"Software Carbon Intensity (SCI)"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://greensoftware.foundation/articles/software-carbon-intensity-sci-specification-project"},"software carbon intensity (SCI)")," score is perhaps the most important value that can be generated using Impact Framework. "),(0,o.kt)("p",null,"SCI is an ISO-recognized standard for reporting the carbon costs of running software. This tutorial demonstrates how to organize a pipeline of Impact framework plugins to calculate SCI scores from some simple observations of the CPU utilization of a software application running in the cloud."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"This tutorial builds on top of the ",(0,o.kt)("a",{parentName:"p",href:"/pipelines/teads"},"Teads curve")," pipeline tutorial. That tutorial demonstrates how to organize a pipeline that converts CPOU utilization observations into CPU energy. This tutorial uses the same pipeline but goes several steps further, including converting the CPU energy estimates into carbon, adding the embodied carbon associated with the hardware being used and calculating the SCI score."),(0,o.kt)("h2",{id:"step-1-pasting-in-the-teads-pipeline"},"Step 1: Pasting in the Teads pipeline"),(0,o.kt)("p",null,"You can start by copying the manifest you created in the Teads curve tutorial into a new file called ",(0,o.kt)("inlineCode",{parentName:"p"},"sci.yml"),". You can use that manifest as a template and build off of it here. Here's a reminder of what the file should look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'name: carbon-intensity plugin demo\ndescription: \ntags:\ninitialize:\n  plugins:\n    interpolate:\n      method: Interpolation\n      path: \'builtin\'\n      global-config:\n        method: linear\n        x: [0, 10, 50, 100]\n        y: [0.12, 0.32, 0.75, 1.02]\n        input-parameter: \'cpu/utilization\'\n        output-parameter: \'cpu-factor\'\n    cpu-factor-to-wattage:\n      method: Multiply\n      path: builtin\n      global-config:\n        input-parameters: ["cpu-factor", "cpu/thermal-design-power"]\n        output-parameter: "cpu-wattage"\n    wattage-times-duration:\n      method: Multiply\n      path: builtin\n      global-config:\n        input-parameters: ["cpu-wattage", "duration"]\n        output-parameter: "cpu-wattage-times-duration"\n    wattage-to-energy-kwh:\n      method: Divide\n      path: "builtin"\n      global-config:\n        numerator: cpu-wattage-times-duration\n        denominator: 3600000\n        output: cpu-energy-raw\n    calculate-vcpu-ratio:\n      method: Divide\n      path: "builtin"\n      global-config:\n        numerator: vcpus-total\n        denominator: vcpus-allocated\n        output: vcpu-ratio\n    correct-cpu-energy-for-vcpu-ratio:\n      method: Divide\n      path: "builtin"\n      global-config:\n        numerator: cpu-energy-raw\n        denominator: vcpu-ratio\n        output: cpu-energy-kwh\ntree:\n  children:\n    child:\n      pipeline:\n        - interpolate\n        - cpu-factor-to-wattage\n        - wattage-times-duration\n        - wattage-to-energy-kwh\n        - calculate-vcpu-ratio\n        - correct-cpu-energy-for-vcpu-ratio\n      defaults:\n        cpu/thermal-design-power: 100\n        vcpus-total: 8\n        vcpus-allocated: 2\n      inputs:\n        - timestamp: 2023-08-06T00:00\n          duration: 360\n          cpu/utilization: 1\n          carbon: 30\n        - timestamp: 2023-09-06T00:00\n          duration: 360\n          carbon: 30\n          cpu/utilization: 10\n        - timestamp: 2023-10-06T00:00\n          duration: 360\n          carbon: 30\n          cpu/utilization: 50\n        - timestamp: 2023-10-06T00:00\n          duration: 360\n          carbon: 30\n          cpu/utilization: 100\n')),(0,o.kt)("h2",{id:"step-2-adding-a-networkenergy-component"},"Step 2: Adding a network/energy component"),(0,o.kt)("p",null,'Your Teads curve manifest only accounted for CPU energy, but this SCI manifest will also consider the energy consumed during data ingress and egress, collectively known as "network energy". This can be calculated from data ingress and egress observations, but in this example, we will shortcut it by adding the ',(0,o.kt)("inlineCode",{parentName:"p"},"network/energy")," value, measured in kWh, directly to the input data. You can do this by adding ",(0,o.kt)("inlineCode",{parentName:"p"},"network/energy")," and a value to each element in the ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs")," array. This is just an example, so you can create dummy values. In a real example, these data would come from observations of a real system."),(0,o.kt)("p",null,"The SCI score will take into account all the energy used by the application, which in this case includes CPU energy and network energy. Therefore, you need to add a plugin that sums these components of energy together and adds the result to the ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs")," array. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Sum")," plugin exists for precisely this purpose. There are going to be multiple instances of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Sum")," plugin in your SCI pipeline, so you should choose a descriptive name for it so that you can easily invoke it in the right position in your pipeline."),(0,o.kt)("p",null,"Add the following to your ",(0,o.kt)("inlineCode",{parentName:"p"},"initialize: plugins: ")," block:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'    sum-energy-components:\n      path: "builtin"\n      method: Sum\n      global-config:\n        input-parameters:\n          - cpu/energy\n          - network/energy\n        output-parameter: energy\n')),(0,o.kt)("p",null,"This will create an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Sum")," called ",(0,o.kt)("inlineCode",{parentName:"p"},"sum-energy-components"),", and it will sum ",(0,o.kt)("inlineCode",{parentName:"p"},"cpu/energy")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"network/energy")," and append the result to ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"energy"),"."),(0,o.kt)("h2",{id:"step-3-account-for-embodied-carbon"},"Step 3: Account for embodied carbon"),(0,o.kt)("p",null,"Embodied carbon is the carbon emitted during the production and disposal of the hardware used to run an application. The total embodied carbon for a unit of hardware is scaled down by the proportion of its expected lifespan used up by an application. This is all handled by another IF ",(0,o.kt)("inlineCode",{parentName:"p"},"builtin")," called ",(0,o.kt)("inlineCode",{parentName:"p"},"SciEmbodied"),". The result is ",(0,o.kt)("inlineCode",{parentName:"p"},"embodied-carbon")," in units of ",(0,o.kt)("inlineCode",{parentName:"p"},"gCO2eq"),". You can simply create an instance of it and add it to your pipeline. It requires no global configuration."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'embodied-carbon:\n  path: "builtin"\n  method: SciEmbodied\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"embodied-carbon")," does expect some specific values to be available in the ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs")," array. These include:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"device/emissions-embodied: # the embodied emissions for the entire component\ntime-reserved: # time the component is used by the application\ndevice/expected-lifespan: # lifespan of the component in seconds\nresources-reserved: # proportion of the total component being allocated\nresources-total: # size of the component\n")),(0,o.kt)("p",null,"Most of these values can be found in manufacturer documentation for specific processors and other hardware. In the present case, you can again provide some default values for a hypothetical system. You can assume the resource is a processor being used in a cloud virtual machine. In this case, the ",(0,o.kt)("inlineCode",{parentName:"p"},"resources-total")," can be the total number of VCPUs for the processor and the ",(0,o.kt)("inlineCode",{parentName:"p"},"resources-allocated")," can be the number of VCPUs actually being used by your application. Remembering back to the Teads curve example, you already have that information available to you in the form of the ",(0,o.kt)("inlineCode",{parentName:"p"},"vcpus-total")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"vcpus-allocated")," fields, which you can pass by name as values to ",(0,o.kt)("inlineCode",{parentName:"p"},"resources-total and ")," resources-reserved`."),(0,o.kt)("p",null,"Add the following to your ",(0,o.kt)("inlineCode",{parentName:"p"},"defaults")," section:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"device/emissions-embodied: 1533.120 # gCO2eq\ntime-reserved: 3600 # 1hr in seconds\ndevice/expected-lifespan: 94608000 # 3 years in seconds\nresources-reserved: vcpus-allocated\nresources-total: vcpus-total\n")),(0,o.kt)("h2",{id:"step-4-calculate-operational-carbon"},"Step 4: Calculate operational carbon"),(0,o.kt)("p",null,"So far, you have calculated the ",(0,o.kt)("em",{parentName:"p"},"embodied")," carbon for your application, but your usage values are still expressed as units of energy. To calculate the ",(0,o.kt)("inlineCode",{parentName:"p"},"carbon")," emissions that result from that energy consumption, you need to multiply your total energy by the carbon intensity of the electricity you consume. This value is known as the ",(0,o.kt)("inlineCode",{parentName:"p"},"operational-carbon"),". In a real example, the grid carbon intensity could be a time-varying value that also depends on your physical location. However, here you will hardcode it for simplicity."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"grid/carbon-intensity\n")),(0,o.kt)("p",null,"Now create an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Multiply")," that will calculate the product of ",(0,o.kt)("inlineCode",{parentName:"p"},"energy")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"grid/carbon-intensity"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'    "operational-carbon":\n      method: Multiply\n      path: builtin\n      global-config:\n        input-parameters: ["energy", "grid/carbon-intensity"]\n        output-parameter: "carbon-operational"\n')),(0,o.kt)("h2",{id:"step-5-sum-carbon-components"},"Step 5: Sum carbon components"),(0,o.kt)("p",null,"At this stage you have two separate sources of carbon emissions treated separately in your ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"embodied-carbon")," anf ",(0,o.kt)("inlineCode",{parentName:"p"},"operational-carbon"),". To account for the total carbon emissions for your application, you need to add these two sources together."),(0,o.kt)("p",null,"Add the following instance of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Sum")," plugin to your ",(0,o.kt)("inlineCode",{parentName:"p"},"initialize: plugins:")," block. It will sum ",(0,o.kt)("inlineCode",{parentName:"p"},"carbon-operational")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"carbon-embodied")," and append the result to ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"carbon"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'sum-carbon:\n    path: "builtin"\n    method: Sum\n    global-config:\n    input-parameters:\n        - carbon-operational\n        - carbon-embodied\n    output-parameter: carbon\n')),(0,o.kt)("h2",{id:"step-6-calculate-sci"},"Step 6: Calculate SCI"),(0,o.kt)("p",null,"Now you have calculated the total carbon emissions due to your application, you can move to the final step which is calculating your SCI score. This is simply the total carbon expressed in terms of some functional unit. Functional units can be measured values such as ",(0,o.kt)("inlineCode",{parentName:"p"},"requests"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"visits"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"users")," or whatever else you want to express your carbon emissions in terms of. In this case, you will simply express your SCI in terms of the entire application, in which case you can just set the functional unit to 1."),(0,o.kt)("p",null,"Add an instance of the SCI plugin to your ",(0,o.kt)("inlineCode",{parentName:"p"},"initialize: plugins:")," block as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'"sci":\n    path: "builtin"\n    method: Sci\n    global-config:\n    functional-unit: "component"\n')),(0,o.kt)("p",null,"SCI will look in each element in the ",(0,o.kt)("inlineCode",{parentName:"p"},"inputs")," array for the ",(0,o.kt)("inlineCode",{parentName:"p"},"component")," key. To ensure it is there, we can add it to ",(0,o.kt)("inlineCode",{parentName:"p"},"defaults")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"component: 1\n")),(0,o.kt)("p",null,"Note that in a real system, you probably don't want to use ",(0,o.kt)("inlineCode",{parentName:"p"},"defaults")," to define your functional unit unless you are sure it is constant over time. More likely, you'll have observations of some system metric in eachg timestep to use as a functional unit."),(0,o.kt)("h2",{id:"step-7-create-the-pipeline"},"Step 7: Create the pipeline"),(0,o.kt)("p",null,"Now you have initialized all the plugins you will need to compute the SCI score, add them in sequence to your execution pipeline, as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"pipeline:\n  - interpolate\n  - cpu-factor-to-wattage\n  - wattage-times-duration\n  - wattage-to-energy-kwh\n  - calculate-vcpu-ratio\n  - correct-cpu-energy-for-vcpu-ratio\n  - sum-energy-components\n  - embodied-carbon\n  - operational-carbon\n  - sum-carbon\n  - sci\n")),(0,o.kt)("p",null,"Congratulations, now you have completed your manifest and can calculate your SCI score!"),(0,o.kt)("h2",{id:"step-8-run-your-manifest"},"Step 8: Run your manifest"),(0,o.kt)("p",null,"Assuming your manifest is saved as ",(0,o.kt)("inlineCode",{parentName:"p"},"sci/yml")," you can run it using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"if-run -m sci.yml\n")),(0,o.kt)("p",null,"You will see the following data displayed in the console:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"name: sci\ndescription: >-\n  a full pipeline seeded with some hardcoded input data and yielding an SCI\n  score\ntags: null\ninitialize:\n  plugins:\n    interpolate:\n      path: builtin\n      method: Interpolation\n      global-config:\n        method: linear\n        x:\n          - 0\n          - 10\n          - 50\n          - 100\n        'y':\n          - 0.12\n          - 0.32\n          - 0.75\n          - 1.02\n        input-parameter: cpu/utilization\n        output-parameter: cpu-factor\n    cpu-factor-to-wattage:\n      path: builtin\n      method: Multiply\n      global-config:\n        input-parameters:\n          - cpu-factor\n          - cpu/thermal-design-power\n        output-parameter: cpu-wattage\n    wattage-times-duration:\n      path: builtin\n      method: Multiply\n      global-config:\n        input-parameters:\n          - cpu-wattage\n          - duration\n        output-parameter: cpu-wattage-times-duration\n    wattage-to-energy-kwh:\n      path: builtin\n      method: Divide\n      global-config:\n        numerator: cpu-wattage-times-duration\n        denominator: 3600000\n        output: cpu-energy-raw\n    calculate-vcpu-ratio:\n      path: builtin\n      method: Divide\n      global-config:\n        numerator: vcpus-total\n        denominator: vcpus-allocated\n        output: vcpu-ratio\n    correct-cpu-energy-for-vcpu-ratio:\n      path: builtin\n      method: Divide\n      global-config:\n        numerator: cpu-energy-raw\n        denominator: vcpu-ratio\n        output: cpu/energy\n    sum-energy-components:\n      path: builtin\n      method: Sum\n      global-config:\n        input-parameters:\n          - cpu/energy\n          - network/energy\n        output-parameter: energy\n    embodied-carbon:\n      path: builtin\n      method: SciEmbodied\n    operational-carbon:\n      path: builtin\n      method: Multiply\n      global-config:\n        input-parameters:\n          - energy\n          - grid/carbon-intensity\n        output-parameter: carbon-operational\n    sum-carbon:\n      path: builtin\n      method: Sum\n      global-config:\n        input-parameters:\n          - carbon-operational\n          - carbon-embodied\n        output-parameter: carbon\n    sci:\n      path: builtin\n      method: Sci\n      global-config:\n        functional-unit: component\n    time-sync:\n      path: builtin\n      method: TimeSync\n      global-config:\n        start-time: '2023-12-12T00:00:00.000Z'\n        end-time: '2023-12-12T00:01:00.000Z'\n        interval: 5\n        allow-padding: true\nexecution:\n  command: >-\n    /home/user/.npm/_npx/1bf7c3c15bf47d04/node_modules/.bin/ts-node\n    /home/user/Code/if/src/index.ts -m manifests/examples/sci.yml -o\n    manifests/outputs/test\n  environment:\n    if-version: 0.3.3-beta.0\n    os: linux\n    os-version: 5.15.0-107-generic\n    node-version: 21.4.0\n    date-time: 2024-06-10T09:14:42.383Z (UTC)\n    dependencies:\n      - '@babel/core@7.22.10'\n      - '@babel/preset-typescript@7.23.3'\n      - '@commitlint/cli@18.6.0'\n      - '@commitlint/config-conventional@18.6.0'\n      - '@jest/globals@29.7.0'\n      - '@types/jest@29.5.8'\n      - '@types/js-yaml@4.0.9'\n      - '@types/luxon@3.4.2'\n      - '@types/node@20.9.0'\n      - axios-mock-adapter@1.22.0\n      - axios@1.7.2\n      - csv-parse@5.5.6\n      - csv-stringify@6.4.6\n      - fixpack@4.0.0\n      - gts@5.2.0\n      - husky@8.0.3\n      - jest@29.7.0\n      - js-yaml@4.1.0\n      - lint-staged@15.2.2\n      - luxon@3.4.4\n      - release-it@16.3.0\n      - rimraf@5.0.5\n      - ts-command-line-args@2.5.1\n      - ts-jest@29.1.1\n      - typescript-cubic-spline@1.0.1\n      - typescript@5.2.2\n      - winston@3.11.0\n      - zod@3.22.4\n  status: success\ntree:\n  children:\n    child-1:\n      pipeline:\n        - interpolate\n        - cpu-factor-to-wattage\n        - wattage-times-duration\n        - wattage-to-energy-kwh\n        - calculate-vcpu-ratio\n        - correct-cpu-energy-for-vcpu-ratio\n        - sum-energy-components\n        - embodied-carbon\n        - operational-carbon\n        - sum-carbon\n        - sci\n      config: null\n      defaults:\n        cpu/thermal-design-power: 100\n        vcpus-total: 8\n        vcpus-allocated: 2\n        grid/carbon-intensity: 800\n        device/emissions-embodied: 1533.12\n        time-reserved: 3600\n        device/expected-lifespan: 94608000\n        resources-reserved: vcpus-allocated\n        resources-total: vcpus-total\n        component: 1\n      inputs:\n        - timestamp: '2023-12-12T00:00:00.000Z'\n          cloud/instance-type: A1\n          cloud/region: uk-west\n          duration: 1\n          cpu/utilization: 50\n          network/energy: 0.000001\n        - timestamp: '2023-12-12T00:00:01.000Z'\n          duration: 5\n          cpu/utilization: 20\n          cloud/instance-type: A1\n          cloud/region: uk-west\n          network/energy: 0.000001\n        - timestamp: '2023-12-12T00:00:06.000Z'\n          duration: 7\n          cpu/utilization: 15\n          cloud/instance-type: A1\n          cloud/region: uk-west\n          network/energy: 0.000001\n        - timestamp: '2023-12-12T00:00:13.000Z'\n          duration: 30\n          cloud/instance-type: A1\n          cloud/region: uk-west\n          cpu/utilization: 15\n          network/energy: 0.000001\n      outputs:\n        - timestamp: '2023-12-12T00:00:00.000Z'\n          cloud/instance-type: A1\n          cloud/region: uk-west\n          duration: 1\n          cpu/utilization: 50\n          network/energy: 0.000001\n          cpu/thermal-design-power: 100\n          vcpus-total: 8\n          vcpus-allocated: 2\n          grid/carbon-intensity: 800\n          device/emissions-embodied: 1533.12\n          time-reserved: 3600\n          device/expected-lifespan: 94608000\n          resources-reserved: vcpus-allocated\n          resources-total: vcpus-total\n          component: 1\n          cpu-factor: 0.75\n          cpu-wattage: 75\n          cpu-wattage-times-duration: 75\n          cpu-energy-raw: 0.000020833333333333333\n          vcpu-ratio: 4\n          cpu/energy: 0.000005208333333333333\n          energy: 0.000006208333333333333\n          carbon-embodied: 0.000004051243023845763\n          carbon-operational: 0.004966666666666666\n          carbon: 0.004970717909690512\n          sci: 0.004970717909690512\n        - timestamp: '2023-12-12T00:00:01.000Z'\n          duration: 5\n          cpu/utilization: 20\n          cloud/instance-type: A1\n          cloud/region: uk-west\n          network/energy: 0.000001\n          cpu/thermal-design-power: 100\n          vcpus-total: 8\n          vcpus-allocated: 2\n          grid/carbon-intensity: 800\n          device/emissions-embodied: 1533.12\n          time-reserved: 3600\n          device/expected-lifespan: 94608000\n          resources-reserved: vcpus-allocated\n          resources-total: vcpus-total\n          component: 1\n          cpu-factor: 0.4275\n          cpu-wattage: 42.75\n          cpu-wattage-times-duration: 213.75\n          cpu-energy-raw: 0.000059375\n          vcpu-ratio: 4\n          cpu/energy: 0.00001484375\n          energy: 0.00001584375\n          carbon-embodied: 0.000020256215119228814\n          carbon-operational: 0.012674999999999999\n          carbon: 0.012695256215119228\n          sci: 0.012695256215119228\n        - timestamp: '2023-12-12T00:00:06.000Z'\n          duration: 7\n          cpu/utilization: 15\n          cloud/instance-type: A1\n          cloud/region: uk-west\n          network/energy: 0.000001\n          cpu/thermal-design-power: 100\n          vcpus-total: 8\n          vcpus-allocated: 2\n          grid/carbon-intensity: 800\n          device/emissions-embodied: 1533.12\n          time-reserved: 3600\n          device/expected-lifespan: 94608000\n          resources-reserved: vcpus-allocated\n          resources-total: vcpus-total\n          component: 1\n          cpu-factor: 0.37375\n          cpu-wattage: 37.375\n          cpu-wattage-times-duration: 261.625\n          cpu-energy-raw: 0.00007267361111111111\n          vcpu-ratio: 4\n          cpu/energy: 0.000018168402777777778\n          energy: 0.000019168402777777778\n          carbon-embodied: 0.00002835870116692034\n          carbon-operational: 0.015334722222222222\n          carbon: 0.015363080923389142\n          sci: 0.015363080923389142\n        - timestamp: '2023-12-12T00:00:13.000Z'\n          duration: 30\n          cloud/instance-type: A1\n          cloud/region: uk-west\n          cpu/utilization: 15\n          network/energy: 0.000001\n          cpu/thermal-design-power: 100\n          vcpus-total: 8\n          vcpus-allocated: 2\n          grid/carbon-intensity: 800\n          device/emissions-embodied: 1533.12\n          time-reserved: 3600\n          device/expected-lifespan: 94608000\n          resources-reserved: vcpus-allocated\n          resources-total: vcpus-total\n          component: 1\n          cpu-factor: 0.37375\n          cpu-wattage: 37.375\n          cpu-wattage-times-duration: 1121.25\n          cpu-energy-raw: 0.00031145833333333335\n          vcpu-ratio: 4\n          cpu/energy: 0.00007786458333333334\n          energy: 0.00007886458333333333\n          carbon-embodied: 0.0001215372907153729\n          carbon-operational: 0.06309166666666667\n          carbon: 0.06321320395738204\n          sci: 0.06321320395738204\n\n")),(0,o.kt)("h2",{id:"what-next"},"What next?"),(0,o.kt)("p",null,"Now you have a basic SCI pipeline, you can use it as a base for more advanced IF runs. Try experimenting with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"aggregating the individual SCI scores over time using our ",(0,o.kt)("a",{parentName:"li",href:"/major-concepts/aggregation"},"aggregate")," feature"),(0,o.kt)("li",{parentName:"ul"},"using ",(0,o.kt)("a",{parentName:"li",href:"/reference/plugins#built-in"},"mock observations")," to generate dummy input data"),(0,o.kt)("li",{parentName:"ul"},"using a third-party plugin to grab real grid carbon intensity data"),(0,o.kt)("li",{parentName:"ul"},"grabbing real metadata for your processor using ",(0,o.kt)("a",{parentName:"li",href:"/pipelines/instance-metadata"},"csv-lookup"))))}u.isMDXComponent=!0}}]);