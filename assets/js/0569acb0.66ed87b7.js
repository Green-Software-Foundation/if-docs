"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[796],{4137:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return t?a.createElement(g,o(o({ref:n},u),{},{components:t})):a.createElement(g,o({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3396:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(7462),i=(t(7294),t(4137));const r={"sidebar-position":1},o="Instance metadata pipeline",l={unversionedId:"pipelines/instance-metadata",id:"pipelines/instance-metadata",title:"Instance metadata pipeline",description:"The instance metadata pipeline simply looks up a metadata for a given virtual machine instance name using the csv-lookup plugin from the IF standard library. However, the target dataset can return multiple processor names for a given VM instance where there are multiple possibilitiers. This means we need to create a pipeline that includes the regex plugin so parse out just one of the possible values.",source:"@site/docs/pipelines/instance-metadata.md",sourceDirName:"pipelines",slug:"/pipelines/instance-metadata",permalink:"/pipelines/instance-metadata",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/if-docs/edit/master/docs/pipelines/instance-metadata.md",tags:[],version:"current",frontMatter:{"sidebar-position":1},sidebar:"tutorialSidebar",previous:{title:"Teads CPU pipeline",permalink:"/pipelines/teads"},next:{title:"Software Carbon Intensity (SCI)",permalink:"/pipelines/sci"}},s={},p=[{value:"Step 1: grab metadata using csv-lookup",id:"step-1-grab-metadata-using-csv-lookup",level:2},{value:"Run the manifest",id:"run-the-manifest",level:2}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"instance-metadata-pipeline"},"Instance metadata pipeline"),(0,i.kt)("p",null,"The instance metadata pipeline simply looks up a metadata for a given virtual machine instance name using the ",(0,i.kt)("inlineCode",{parentName:"p"},"csv-lookup")," plugin from the IF standard library. However, the target dataset can return multiple processor names for a given VM instance where there are multiple possibilitiers. This means we need to create a pipeline that includes the ",(0,i.kt)("inlineCode",{parentName:"p"},"regex")," plugin so parse out just one of the possible values."),(0,i.kt)("p",null,"For this demo we'll just extract the first value if there are m,ultiple available for the ",(0,i.kt)("inlineCode",{parentName:"p"},"processor-name"),"."),(0,i.kt)("p",null,"Start by creating a manifest and adding the following boilerplate code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"name: metadata-demo\ndescription:\ntags:\ninitialize:\n  plugins:\ntree:\n  children:\n    child:\n      pipeline:\n        observe:\n        regroup:\n        compute:\n      inputs:\n")),(0,i.kt)("h2",{id:"step-1-grab-metadata-using-csv-lookup"},"Step 1: grab metadata using csv-lookup"),(0,i.kt)("p",null,"There is a cloud instance metadata file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"if-data")," Github repository. You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"csv-lookup")," plugin to grab data from that file. You do not need to have a local copy of the file, you can simply provide the URL of the remote file."),(0,i.kt)("p",null,"You can create an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"CSVLookup")," and name it ",(0,i.kt)("inlineCode",{parentName:"p"},"cloud-instance-metadata")," and add it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize")," block in your manifest file. "),(0,i.kt)("p",null,"The lookup query is configured in ",(0,i.kt)("inlineCode",{parentName:"p"},"global-config"),". You provide the parameters you want to use as selectors, and the selector value is a field from your ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs")," array. You also provide the target columns you want to return data from (we'll use a wildcard and grab everything)."),(0,i.kt)("p",null,"You want to retrieve all available data where ",(0,i.kt)("inlineCode",{parentName:"p"},"instance-class")," is equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"Standard_A1_v2"),". So you need to make sure that ",(0,i.kt)("inlineCode",{parentName:"p"},"Standard_A1_v2")," is available in your ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs")," array - we'll put it there with the key ",(0,i.kt)("inlineCode",{parentName:"p"},"cloud/instance-type"),"."),(0,i.kt)("p",null,"Add the following data to your ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs")," array:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- timestamp: 2023-08-06T00:00\n    duration: 3600\n    cpu/energy: 0.001\n    cloud/instance-type: Standard_A1_v2\n")),(0,i.kt)("p",null,"Now, add the ",(0,i.kt)("inlineCode",{parentName:"p"},"CSVLookup")," instance to your ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize")," block. Configure your query so that you select your row based on the value in the ",(0,i.kt)("inlineCode",{parentName:"p"},"instance-class")," column. The value should be ",(0,i.kt)("inlineCode",{parentName:"p"},"cloud/instance-type"),". You want data from all the other rows, so ",(0,i.kt)("inlineCode",{parentName:"p"},"output")," can be a wildcard ",(0,i.kt)("inlineCode",{parentName:"p"},'"*"'),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'name: csv-demo\ndescription:\ntags:\ninitialize:\n  plugins:\n    cloud-instance-metadata:\n      method: CSVLookup\n      path: "builtin"\n      global-config:\n        filepath: https://raw.githubusercontent.com/Green-Software-Foundation/if-data/main/cloud-metdata-azure-instances.csv\n        query:\n          instance-class: "cloud/instance-type"\n        output: "*"\n')),(0,i.kt)("p",null,"The CSV lookup can return multiple values for the processor name, because the same instance can use different processors in different circumstances. Multiple values are returned as a single string, separated using commas. Therefore, you can easily parse out the first individual value by selecting the entire string up to the first comma. This is a simple regex task."),(0,i.kt)("p",null,"Create an instance of your ",(0,i.kt)("inlineCode",{parentName:"p"},"regex")," plugin, and select all characters up to the first comma, by adding the following to your ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize")," block:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'extract-processor-name:\n    method: Regex\n    path: "builtin"\n    global-config:\n    parameter: cpu-model-name\n    match: /^([^,])+/g\n    output: cpu/name\n')),(0,i.kt)("p",null,"That's it! "),(0,i.kt)("h2",{id:"run-the-manifest"},"Run the manifest"),(0,i.kt)("p",null,"Here's the complete manifest:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'name: instance-metadata\ndescription:\ntags:\ninitialize:\n  plugins:\n    cloud-instance-metadata:\n      method: CSVLookup\n      path: "builtin"\n      global-config:\n        filepath: https://raw.githubusercontent.com/Green-Software-Foundation/if-data/main/cloud-metdata-azure-instances.csv\n        query:\n          instance-class: "cloud/instance-type"\n        output: "*"\n    extract-processor-name:\n      method: Regex\n      path: "builtin"\n      global-config:\n        parameter: cpu-model-name\n        match: /^([^,])+/g\n        output: cpu/name\ntree:\n  children:\n    child:\n      pipeline:\n        observe:\n        regroup:\n        compute:\n          - cloud-instance-metadata\n          - extract-processor-name\n      inputs:\n        - timestamp: 2023-08-06T00:00\n          duration: 3600\n          cpu/energy: 0.001\n          cloud/provider: gcp\n          cloud/region: asia-east\n          cloud/instance-type: Standard_A1_v2\n')),(0,i.kt)("p",null,"Now you can run this manifest using:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"if-run -m instance-metadata.yml -o output.yml\n")),(0,i.kt)("p",null,"Your new ",(0,i.kt)("inlineCode",{parentName:"p"},"output.yml")," file will contain the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"name: csv-demo\ndescription: null\ntags: null\ninitialize:\n  plugins:\n    cloud-instance-metadata:\n      path: builtin\n      method: CSVLookup\n      global-config:\n        filepath: >-\n          https://raw.githubusercontent.com/Green-Software-Foundation/if-data/main/cloud-metdata-azure-instances.csv\n        query:\n          instance-class: cloud/instance-type\n        output: '*'\n    extract-processor-name:\n      path: builtin\n      method: Regex\n      global-config:\n        parameter: cpu-model-name\n        match: /^([^,])+/g\n        output: cpu/name\nexecution:\n  command: >-\n    /home/user/.npm/_npx/1bf7c3c15bf47d04/node_modules/.bin/ts-node\n    /home/user/Code/if/src/index.ts -m manifests/examples/instance-metadata.yml\n  environment:\n    if-version: 0.3.3-beta.0\n    os: linux\n    os-version: 5.15.0-107-generic\n    node-version: 21.4.0\n    date-time: 2024-06-06T15:21:50.108Z (UTC)\n    dependencies:\n      - '@babel/core@7.22.10'\n      - '@babel/preset-typescript@7.23.3'\n      - '@commitlint/cli@18.6.0'\n      - '@commitlint/config-conventional@18.6.0'\n      - '@grnsft/if-unofficial-plugins@v0.3.1'\n      - '@jest/globals@29.7.0'\n      - '@types/jest@29.5.8'\n      - '@types/js-yaml@4.0.9'\n      - '@types/luxon@3.4.2'\n      - '@types/node@20.9.0'\n      - axios-mock-adapter@1.22.0\n      - axios@1.7.2\n      - csv-parse@5.5.6\n      - csv-stringify@6.4.6\n      - fixpack@4.0.0\n      - gts@5.2.0\n      - husky@8.0.3\n      - jest@29.7.0\n      - js-yaml@4.1.0\n      - lint-staged@15.2.2\n      - luxon@3.4.4\n      - release-it@16.3.0\n      - rimraf@5.0.5\n      - ts-command-line-args@2.5.1\n      - ts-jest@29.1.1\n      - typescript-cubic-spline@1.0.1\n      - typescript@5.2.2\n      - winston@3.11.0\n      - zod@3.22.4\n  status: success\ntree:\n  children:\n    child:\n      pipeline:\n        observe:\n        regroup:\n        compute:\n          - cloud-instance-metadata\n          - extract-processor-name\n      inputs:\n        - timestamp: 2023-08-06T00:00\n          duration: 3600\n          cpu/energy: 0.001\n          cloud/provider: gcp\n          cloud/region: asia-east\n          cloud/instance-type: Standard_A1_v2\n      outputs:\n        - timestamp: 2023-08-06T00:00\n          duration: 3600\n          cpu/energy: 0.001\n          cloud/provider: gcp\n          cloud/region: asia-east\n          cloud/instance-type: Standard_A1_v2\n          cpu-cores-available: 52\n          cpu-cores-utilized: 1\n          cpu-manufacturer: Intel\n          cpu-model-name: >-\n            Intel\xae Xeon\xae Platinum 8272CL,Intel\xae Xeon\xae 8171M 2.1 GHz,Intel\xae Xeon\xae\n            E5-2673 v4 2.3 GHz,Intel\xae Xeon\xae E5-2673 v3 2.4 GHz\n          cpu-tdp: 205\n          gpu-count: nan\n          gpu-model-name: nan\n          gpu-tdp: nan\n          memory-available: 2\n          cpu/name: Intel\xae Xeon\xae Platinum 8272CL\n")))}c.isMDXComponent=!0}}]);