"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[316],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=s(n),f=a,d=g["".concat(c,".").concat(f)]||g[f]||p[f]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3684:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(4137));const o={},i="IF features",l={unversionedId:"reference/features",id:"reference/features",title:"IF features",description:"This page simply lists the features of Impact Framework that are not plugins or CLI tools, along with a brief description, usage instruction and link to more detailed docs.",source:"@site/docs/reference/features.md",sourceDirName:"reference",slug:"/reference/features",permalink:"/reference/features",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/if-docs/edit/master/docs/reference/features.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Errors",permalink:"/reference/errors"},next:{title:"Plugins",permalink:"/reference/plugins"}},c={},s=[{value:"Aggregate",id:"aggregate",level:2},{value:"How to configure",id:"how-to-configure",level:3},{value:"Explainer",id:"explainer",level:2},{value:"How to configure",id:"how-to-configure-1",level:3}],u={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"if-features"},"IF features"),(0,a.kt)("p",null,"This page simply lists the features of Impact Framework that are not plugins or CLI tools, along with a brief description, usage instruction and link to more detailed docs."),(0,a.kt)("p",null,"Typically these features are enabled using a piece of manifest config."),(0,a.kt)("h2",{id:"aggregate"},"Aggregate"),(0,a.kt)("p",null,"Aggregate collects and summarizes data across time or across components in your tree."),(0,a.kt)("h3",{id:"how-to-configure"},"How to configure"),(0,a.kt)("p",null,'Add the following config to your manifest (this example is for aggregating "cpu/utilization" values across both time and components):'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"aggregation:\n  metrics:\n    - 'cpu/utilization'\n  type: both\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/major-concepts/aggregation"},"Read more on aggregate")),(0,a.kt)("h2",{id:"explainer"},"Explainer"),(0,a.kt)("p",null,"The explainer lists the unit, description, aggregation method, and plugins of the parameter that is used in the manifest."),(0,a.kt)("h3",{id:"how-to-configure-1"},"How to configure"),(0,a.kt)("p",null,"You can toggle the ",(0,a.kt)("inlineCode",{parentName:"p"},"explainer")," by adding the following config to your manifest:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"explainer: true\n")),(0,a.kt)("p",null,"You can override the parameter metadata provided in a plugin's source code by adding it to the plugin's ",(0,a.kt)("inlineCode",{parentName:"p"},"initialize")," block, as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'explainer: true\nplugins:\n  "sum-carbon":\n      path: "builtin"\n      method: Sum\n      global-config:\n      input-parameters:\n          - carbon-operational\n          - carbon-embodied\n      output-parameter: carbon\n      parameter-metadata:\n      inputs:\n          carbon-operational:\n          description: "carbon emitted due to an application\'s execution"\n          unit: "gCO2eq"\n          aggregation-method: \'sum\',\n          carbon-embodied:\n          description: "carbon emitted during the production, distribution and disposal of a hardware component, scaled by the fraction of the component\'s lifespan being allocated to the application under investigation"\n          unit: "gCO2eq"\n          aggregation-method: \'sum\'\n')),(0,a.kt)("p",null,"Read more on ",(0,a.kt)("a",{parentName:"p",href:"/users/how-to-use-the-explain-feature"},"explainer")))}p.isMDXComponent=!0}}]);