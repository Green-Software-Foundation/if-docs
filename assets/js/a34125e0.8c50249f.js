"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[316],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3684:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(4137));const r={},o="IF features",l={unversionedId:"reference/features",id:"reference/features",title:"IF features",description:"This page simply lists the features of Impact Framework that are not plugins or CLI tools, along with a brief description, usage instruction and link to more detailed docs.",source:"@site/docs/reference/features.md",sourceDirName:"reference",slug:"/reference/features",permalink:"/reference/features",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/if-docs/edit/master/docs/reference/features.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Errors",permalink:"/reference/errors"},next:{title:"Plugins",permalink:"/reference/plugins"}},s={},p=[{value:"Aggregate",id:"aggregate",level:2},{value:"How to configure",id:"how-to-configure",level:3},{value:"Explainer",id:"explainer",level:2},{value:"How to configure",id:"how-to-configure-1",level:3},{value:"Inline Arithmetic Expressions",id:"inline-arithmetic-expressions",level:2},{value:"Supported Symbols and Operations:",id:"supported-symbols-and-operations",level:3},{value:"Syntax:",id:"syntax",level:3},{value:"Example:",id:"example",level:3},{value:"Plugin support",id:"plugin-support",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"if-features"},"IF features"),(0,i.kt)("p",null,"This page simply lists the features of Impact Framework that are not plugins or CLI tools, along with a brief description, usage instruction and link to more detailed docs."),(0,i.kt)("p",null,"Typically these features are enabled using a piece of manifest config."),(0,i.kt)("h2",{id:"aggregate"},"Aggregate"),(0,i.kt)("p",null,"Aggregate collects and summarizes data across time or across components in your tree."),(0,i.kt)("h3",{id:"how-to-configure"},"How to configure"),(0,i.kt)("p",null,'Add the following config to your manifest (this example is for aggregating "cpu/utilization" values across both time and components):'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"aggregation:\n  metrics:\n    - 'cpu/utilization'\n  type: both\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/major-concepts/aggregation"},"Read more on aggregate")),(0,i.kt)("h2",{id:"explainer"},"Explainer"),(0,i.kt)("p",null,"The explainer lists the unit, description, aggregation method, and plugins of the parameter that is used in the manifest."),(0,i.kt)("h3",{id:"how-to-configure-1"},"How to configure"),(0,i.kt)("p",null,"You can toggle the ",(0,i.kt)("inlineCode",{parentName:"p"},"explainer")," by adding the following config to your manifest:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"explainer: true\n")),(0,i.kt)("p",null,"You can override the parameter metadata provided in a plugin's source code by adding it to the plugin's ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize")," block, as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"explainer: true\nplugins:\n  'sum-carbon':\n    path: 'builtin'\n    method: Sum\n    config:\n      input-parameters:\n        - carbon-operational\n        - carbon-embodied\n      output-parameter: carbon\n    parameter-metadata:\n      inputs:\n        carbon-operational:\n          description: \"carbon emitted due to an application's execution\"\n          unit: 'gCO2eq'\n          aggregation-method:\n            time: sum\n            component: sum,\n        carbon-embodied:\n          description: \"carbon emitted during the production, distribution and disposal of a hardware component, scaled by the fraction of the component's lifespan being allocated to the application under investigation\"\n          unit: 'gCO2eq'\n          aggregation-method:\n            time: sum\n            component: sum\n")),(0,i.kt)("p",null,"Read more on ",(0,i.kt)("a",{parentName:"p",href:"/users/how-to-use-the-explain-feature"},"explainer")),(0,i.kt)("h2",{id:"inline-arithmetic-expressions"},"Inline Arithmetic Expressions"),(0,i.kt)("p",null,"Inline arithmetic expressions allow basic mathematical operations to be embedded directly within ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," parameters and ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs")," values in manifest files. This enables dynamic calculations using constants or input variables, eliminating the need for manual pre-calculation of parameters."),(0,i.kt)("h3",{id:"supported-symbols-and-operations"},"Supported Symbols and Operations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"="),": Indicates the start of an arithmetic expression."),(0,i.kt)("li",{parentName:"ul"},"Supported operators: ",(0,i.kt)("inlineCode",{parentName:"li"},"*")," (multiplication), ",(0,i.kt)("inlineCode",{parentName:"li"},"+")," (addition), ",(0,i.kt)("inlineCode",{parentName:"li"},"-")," (subtraction), ",(0,i.kt)("inlineCode",{parentName:"li"},"/")," (division).")),(0,i.kt)("h3",{id:"syntax"},"Syntax:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To define an inline arithmetic expression, the string must start with an equal sign (",(0,i.kt)("inlineCode",{parentName:"li"},"="),"). For example:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"'input-parameter': '= 2 * carbon'\n")),"This expression evaluates the multiplication of ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," by the value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"carbon")," parameter from the input."),(0,i.kt)("li",{parentName:"ul"},"Arithmetic operations between two constants can also be defined without using the equal sign (",(0,i.kt)("inlineCode",{parentName:"li"},"="),"):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"coefficient: 2 * 2\n")),"This expression evaluates the multiplication of ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," by ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," directly."),(0,i.kt)("li",{parentName:"ul"},"If the parameter name contains symbols, it should be placed in the quotes. The expresion should look like:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"output-parameter: '= 2 * \"carbon-product\"'\n")))),(0,i.kt)("h3",{id:"example"},"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"config:\n  'input-parameter': '= 2 * carbon'\n  coefficient: 2 * 2\n  'output-parameter': '= 2 * \"carbon-product\"'\n---\ninputs:\n  - timestamp: 2023-08-06T00:00\n    duration: 3600 * 60\n    carbon: = 10 * \"other-param\"\n    other-param: 3\n")),(0,i.kt)("h3",{id:"plugin-support"},"Plugin support"),(0,i.kt)("p",null,"To enable inline arithmetic expressions in your plugin, specify it in your plugin\u2019s definition function like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"allowArithmeticExpressions: ['input-parameter', 'coefficient'];\n")),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"allowArithmeticExpressions")," array, list all parameters (whether in config, inputs, or outputs) that can contain arithmetic expressions. The calculations are handled internally (in the PluginFactory interface)."),(0,i.kt)("p",null,"If your plugin doesn\u2019t have specified parameters but has dynamic output parameters that should support evaluation, you can enable ",(0,i.kt)("inlineCode",{parentName:"p"},"arithmeticExpressions")," with an empty array:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"allowArithmeticExpressions: [];\n")),(0,i.kt)("p",null,"To design your plugin with support for arithmetic expressions, you can use various utility functions."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If your plugin's config parameters must be of type ",(0,i.kt)("inlineCode",{parentName:"li"},"number"),", you can use the ",(0,i.kt)("inlineCode",{parentName:"li"},"validateArithmeticExpression")," function from ",(0,i.kt)("inlineCode",{parentName:"li"},"@grnsft/if-core/utils"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {validateArithmeticExpression} from '@grnsft/if-core/utils';\n\n// Plugin definition\n\nconfigValidation: (config: ConfigParams) => {\n    const configSchema = z.object({\n      coefficient: z.preprocess(\n        value => validateArithmeticExpression('coefficient', value, 'number'),\n        z.number()\n      ),\n      'input-parameter': z.string().min(1),\n      'output-parameter': z.string().min(1),\n    });\n\n    return validate<z.infer<typeof configSchema>>(\n      configSchema as ZodType<any>,\n      config\n    );\n  },\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If your config parameters contain arithmetic expressions like the following:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"config:\n  keep-existing: false\n  from: = 4 * \"if-size\"\n  to: 'if-repo-size'\n")),(0,i.kt)("p",null,"But during implementation, you need to extract the pure parameter name (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"if-size"),"), you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"getParameterFromArithmeticExpression")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { getParameterFromArithmeticExpression } from '@grnsft/if-core/utils';\n\n// Plugin definition\n\nconfigValidation: (config: ConfigParams) => {\n  const configSchema = z.object({\n    'keep-existing': z.boolean(),\n    from: z.string().min(1),\n    to: z.string().min(1),\n  });\n\n  const extractedFrom = getParameterFromArithmeticExpression(config.from);\n  const updatedConfig = config['keep-existing']\n    ? config\n    : { ...config, 'pure-from': extractedFrom };\n\n  validate<z.infer<typeof configSchema>>(configSchema, updatedConfig);\n\n  return updatedConfig;\n};\n")))}c.isMDXComponent=!0}}]);