"use strict";(self.webpackChunkgreen_software_training=self.webpackChunkgreen_software_training||[]).push([[554],{4137:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=i.createContext({}),s=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(t),c=a,f=d["".concat(p,".").concat(c)]||d[c]||m[c]||o;return t?i.createElement(f,r(r({ref:n},u),{},{components:t})):i.createElement(f,r({ref:n},u))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=t[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3880:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=t(7462),a=(t(7294),t(4137));const o={},r="SCI (software carbon intensity)",l={unversionedId:"models/sci",id:"models/sci",title:"SCI (software carbon intensity)",description:"SCI is the final value the framework ultimately aims to return for some component or application. It represents the amount of carbon emitted per functional unit.",source:"@site/docs/05-models/sci.md",sourceDirName:"05-models",slug:"/models/sci",permalink:"/models/sci",draft:!1,editUrl:"https://github.com/Green-Software-Foundation/TODO/docs/05-models/sci.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SCI-O (operational emissions)",permalink:"/models/sci-o"},next:{title:"Shell-imp",permalink:"/models/shell"}},p={},s=[{value:"Model name",id:"model-name",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Model config",id:"model-config",level:3},{value:"Observations",id:"observations",level:3},{value:"Returns",id:"returns",level:2},{value:"Calculation",id:"calculation",level:2},{value:"IEF Implementation",id:"ief-implementation",level:2},{value:"Example impl",id:"example-impl",level:2}],u={toc:s};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sci-software-carbon-intensity"},"SCI (software carbon intensity)"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://sci-guide.greensoftware.foundation/"},"SCI")," is the final value the framework ultimately aims to return for some component or application. It represents the amount of carbon emitted per ",(0,a.kt)("a",{parentName:"p",href:"https://sci-guide.greensoftware.foundation/R/"},"functional unit"),"."),(0,a.kt)("h2",{id:"model-name"},"Model name"),(0,a.kt)("p",null,"IF recognizes the SCI model as ",(0,a.kt)("inlineCode",{parentName:"p"},"sci")," "),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("h3",{id:"model-config"},"Model config"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"functional-unit"),": the functional unit in which to express the carbon impact\n",(0,a.kt)("inlineCode",{parentName:"p"},"functional-unit-time"),": the time unit to be used for functional unit conversions, e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"mins"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"functional-unit-duration"),": the length of time the functional unit should cover, in units of ",(0,a.kt)("inlineCode",{parentName:"p"},"functional-time-unit")),(0,a.kt)("h3",{id:"observations"},"Observations"),(0,a.kt)("p",null,"either:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"carbon"),": total carbon, i.e. sum of embodied and operational, in gCO2eq")),(0,a.kt)("p",null,"or both of"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"operational-carbon"),": carbon emitted during an application's operation in gCO2eq"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"embodied-carbon"),": carbon emitted in a component's manufacture and disposal in gCO2eq")),(0,a.kt)("p",null,"plus:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"timestamp"),": a timestamp for the observation"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duration"),": the amount of time, in seconds, that the observation covers.")),(0,a.kt)("h2",{id:"returns"},"Returns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"carbon"),": the total carbon, calculated as the sum of ",(0,a.kt)("inlineCode",{parentName:"li"},"operational-carbon")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"embodied-carbon"),", in gCO2eq"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sci"),": carbon expressed in terms of the given functional unit")),(0,a.kt)("h2",{id:"calculation"},"Calculation"),(0,a.kt)("p",null,"SCI is calculated as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sci = operational-carbon + embodied-carbon / functional unit\n")),(0,a.kt)("p",null,"where ",(0,a.kt)("inlineCode",{parentName:"p"},"operational-carbon")," is the product of ",(0,a.kt)("inlineCode",{parentName:"p"},"energy")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"grid-intensity"),". The SCI-guide represents this as"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"SCI = (E * I) + M per R\n")),(0,a.kt)("p",null,"where ",(0,a.kt)("inlineCode",{parentName:"p"},"E")," = energy used in kWh, ",(0,a.kt)("inlineCode",{parentName:"p"},"I")," is grid intensity in gCO2e/kWh, ",(0,a.kt)("inlineCode",{parentName:"p"},"M")," is embodied carbon, and ",(0,a.kt)("inlineCode",{parentName:"p"},"R")," is the functional unit."),(0,a.kt)("p",null,"SCI is the sum of the ",(0,a.kt)("inlineCode",{parentName:"p"},"operational-carbon")," (calculated using the ",(0,a.kt)("inlineCode",{parentName:"p"},"sci-o")," model) and the ",(0,a.kt)("inlineCode",{parentName:"p"},"embodied-carbon")," (calculated using the ",(0,a.kt)("inlineCode",{parentName:"p"},"sci-m")," model). It is then converted to some functional unit, for example for an API the functional unit might be per request, or for a website it might be per 1000 visits. "),(0,a.kt)("h2",{id:"ief-implementation"},"IEF Implementation"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"sci")," takes ",(0,a.kt)("inlineCode",{parentName:"p"},"operational-carbon")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"embodied-carbon")," as inputs along with three parameters related to the functional unit: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"functional-unit"),": a string describing the functional unit to normalize the SCI to. This must match a field provided in the ",(0,a.kt)("inlineCode",{parentName:"li"},"inputs")," with an associated value. For example, if ",(0,a.kt)("inlineCode",{parentName:"li"},"functional-unit")," is ",(0,a.kt)("inlineCode",{parentName:"li"},'"requests"')," then there should be a ",(0,a.kt)("inlineCode",{parentName:"li"},"requests")," field in ",(0,a.kt)("inlineCode",{parentName:"li"},"obserations")," with an associated value for the number of requests per ",(0,a.kt)("inlineCode",{parentName:"li"},"functional-unit-duration"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"functional-unit-time"),": a time unit for ",(0,a.kt)("inlineCode",{parentName:"li"},"functional-unit-duration")," as a string. E.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"s"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"seconds"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"days"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"months"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"y"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"functional-unit-duration"),": The length of time, in units of ",(0,a.kt)("inlineCode",{parentName:"li"},"functional-unit-time")," that the ",(0,a.kt)("inlineCode",{parentName:"li"},"sci")," value should be normalized to. We expect this to nearly always be ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),", but for example if you want your ",(0,a.kt)("inlineCode",{parentName:"li"},"sci")," value expressed as gC/user/2yr you could set ",(0,a.kt)("inlineCode",{parentName:"li"},"functional-unit-duration")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"2"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"functional-unit-time")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"years"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"functional-unit")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"y"),".")),(0,a.kt)("p",null,"In a model pipeline, time is always denominated in ",(0,a.kt)("inlineCode",{parentName:"p"},"seconds"),". It is only in ",(0,a.kt)("inlineCode",{parentName:"p"},"sci")," that other units of time are considered. Therefore, if ",(0,a.kt)("inlineCode",{parentName:"p"},"functional-unit-time")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"month"),", then the sum of ",(0,a.kt)("inlineCode",{parentName:"p"},"operational-carbon")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"embodied-carbon")," is multiplied by the number of seconds in one month."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"operational-carbon: 0.02  // operational-carbon per s\nembodied-carbon: 5   // embodied-carbon per s\nfunctional-unit: requests  // indicate the functional unit is requests\nfunctional-unit-time: minute  // time unit is minutes\nfunctional-unit-duration: 1  // time span is 1 functional-unit-time (1 minute)\nrequests: 100   // requests per minute\n\nsci-per-s = operational-carbon + embodied-carbon / duration  // (= 5.02)\nsci-per-minute = sci-per-s * 60  // (= 301.2)\nsci-per-f-unit = sci-per-duration / 100  // (= 3.012 gC/request)\n")),(0,a.kt)("p",null,"To run the model, you must first create an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"SciModel")," and call its ",(0,a.kt)("inlineCode",{parentName:"p"},"configure()")," method. Then, you can call ",(0,a.kt)("inlineCode",{parentName:"p"},"execute()")," to return ",(0,a.kt)("inlineCode",{parentName:"p"},"sci"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { SciModel } from '@gsf/ief';\n\nconst sciModel = new SciModel();\nsciModel.configure('name', {\n      functional-unit-time: 'day',\n      functional-unit: 'requests',\n      functional-unit-duration: 1,)\nconst results = sciModel.execute([\n  {\n    operational-carbon: 0.02\n    embodied-carbon: 5,\n    duration: 1\n    requests: 100,\n  }\n])\n")),(0,a.kt)("h2",{id:"example-impl"},"Example impl"),(0,a.kt)("p",null,"IEF users will typically call the model as part of a pipeline defined in an ",(0,a.kt)("inlineCode",{parentName:"p"},"impl")," file. In this case, instantiating and configuring the model is handled by ",(0,a.kt)("inlineCode",{parentName:"p"},"impact-engine")," and does not have to be done explicitly by the user. The following is an example ",(0,a.kt)("inlineCode",{parentName:"p"},"impl")," that calls ",(0,a.kt)("inlineCode",{parentName:"p"},"sci"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"name: sci-demo\ndescription: example invoking sci model\ntags:\ninitialize:\n  models:\n    - name: sci\n      kind: plugin\n      model: SciModel\n      path: sci\ngraph:\n  children:\n    child:\n      pipeline:\n        - sci\n      config:\n        sci:\n          functional-unit-duration: 1 \n          functional-unit-time: 'minutes'\n          functional-unit: requests # factor to convert per time to per f.unit\n      inputs:\n        - timestamp: 2023-07-06T00:00\n          operational-carbon: 0.02\n          embodied-carbon: 5\n          duration: 1\n          requests: 100\n")))}m.isMDXComponent=!0}}]);